=begin
#API References

#The **Phyllo API** is built on RESTful principles and returns JSON encoded responses and accepts JSON payloads. It is only available through HTTPS to ensure the security of the data in transfer. These APIs must be called only from your server and never from your app / frontend as this is a security concern.  The API operates in three environments: **sandbox**, **staging** and **production**.  The sandbox environment returns mock data and is used for testing the basic functionality of the system.  The staging environment is exactly like a production environment but with certain limitations. It is used for your internal testing and development purposes.  The production environment connects to real platform accounts and all data reads and writes are made to live accounts. This is what you would use to get data for your customers.

The version of the OpenAPI document: v1.0
Contact: support@getphyllo.com
Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'cgi'

module Phyllo
  class EngagementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve publication content items in bulk
    # Search content items in bulk by providing the IDs.   This is best used in combination with webhooks - you can directly take the IDs from \"CONTENTS.ADDED\" and \"CONTENTS.UPDATED\" webhook notifications and pass on to this API to get the updated content items.
    # @param [Hash] opts the optional parameters
    # @option opts [ContentSearch1] :content_search1 
    # @return [ContentSearchList1]
    def postv1pubcontentssearch(opts = {})
      data, _status_code, _headers = postv1pubcontentssearch_with_http_info(opts)
      data
    end

    # Retrieve publication content items in bulk
    # Search content items in bulk by providing the IDs.   This is best used in combination with webhooks - you can directly take the IDs from \&quot;CONTENTS.ADDED\&quot; and \&quot;CONTENTS.UPDATED\&quot; webhook notifications and pass on to this API to get the updated content items.
    # @param [Hash] opts the optional parameters
    # @option opts [ContentSearch1] :content_search1 
    # @return [Array<(ContentSearchList1, Integer, Hash)>] ContentSearchList1 data, response status code and response headers
    def postv1pubcontentssearch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EngagementApi.postv1pubcontentssearch ...'
      end
      # resource path
      local_var_path = '/v1/publications/contents/search'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/xml'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'content_search1'])

      # return_type
      return_type = opts[:debug_return_type] || 'ContentSearchList1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic Authentication']

      new_options = opts.merge(
        :operation => :"EngagementApi.postv1pubcontentssearch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EngagementApi#postv1pubcontentssearch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve content group items in bulk
    # Search content group items in bulk by providing the IDs.   This is best used in combination with webhooks - you can directly take the IDs from \"CONTENT-GROUPS.ADDED\" and \"CONTENT-GROUPS.UPDATED\" webhook notifications and pass on to this API to get the updated content group items.
    # @param [Hash] opts the optional parameters
    # @option opts [ContentGroupSearch1] :content_group_search1 
    # @return [ContentGroupSearchList1]
    def postv1socialcontentgroupssearch(opts = {})
      data, _status_code, _headers = postv1socialcontentgroupssearch_with_http_info(opts)
      data
    end

    # Retrieve content group items in bulk
    # Search content group items in bulk by providing the IDs.   This is best used in combination with webhooks - you can directly take the IDs from \&quot;CONTENT-GROUPS.ADDED\&quot; and \&quot;CONTENT-GROUPS.UPDATED\&quot; webhook notifications and pass on to this API to get the updated content group items.
    # @param [Hash] opts the optional parameters
    # @option opts [ContentGroupSearch1] :content_group_search1 
    # @return [Array<(ContentGroupSearchList1, Integer, Hash)>] ContentGroupSearchList1 data, response status code and response headers
    def postv1socialcontentgroupssearch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EngagementApi.postv1socialcontentgroupssearch ...'
      end
      # resource path
      local_var_path = '/v1/social/content-groups/search'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/xml'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'content_group_search1'])

      # return_type
      return_type = opts[:debug_return_type] || 'ContentGroupSearchList1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic Authentication']

      new_options = opts.merge(
        :operation => :"EngagementApi.postv1socialcontentgroupssearch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EngagementApi#postv1socialcontentgroupssearch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve content items in bulk
    # Search content items in bulk by providing the IDs.   This is best used in combination with webhooks - you can directly take the IDs from \"CONTENTS.ADDED\" and \"CONTENTS.UPDATED\" webhook notifications and pass on to this API to get the updated content items.
    # @param [Hash] opts the optional parameters
    # @option opts [ContentSearch1] :content_search1 
    # @return [ContentSearchList1]
    def postv1socialcontentssearch(opts = {})
      data, _status_code, _headers = postv1socialcontentssearch_with_http_info(opts)
      data
    end

    # Retrieve content items in bulk
    # Search content items in bulk by providing the IDs.   This is best used in combination with webhooks - you can directly take the IDs from \&quot;CONTENTS.ADDED\&quot; and \&quot;CONTENTS.UPDATED\&quot; webhook notifications and pass on to this API to get the updated content items.
    # @param [Hash] opts the optional parameters
    # @option opts [ContentSearch1] :content_search1 
    # @return [Array<(ContentSearchList1, Integer, Hash)>] ContentSearchList1 data, response status code and response headers
    def postv1socialcontentssearch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EngagementApi.postv1socialcontentssearch ...'
      end
      # resource path
      local_var_path = '/v1/social/contents/search'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/xml'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'content_search1'])

      # return_type
      return_type = opts[:debug_return_type] || 'ContentSearchList1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic Authentication']

      new_options = opts.merge(
        :operation => :"EngagementApi.postv1socialcontentssearch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EngagementApi#postv1socialcontentssearch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all comments
    # Lists all comments of the given account.
    # @param account_id [String] Unique ID of the connected account.
    # @param content_id [String] Unique ID of the content item.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10. (default to 10)
    # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0. (default to 0)
    # @option opts [Date] :to_date Return comments published on or before this date. (YYYY-MM-DD)
    # @option opts [Date] :from_date Return comments published on or after this date. (YYYY-MM-DD)
    # @return [CommentResponse]
    def v1_engagement_get_comments(account_id, content_id, opts = {})
      data, _status_code, _headers = v1_engagement_get_comments_with_http_info(account_id, content_id, opts)
      data
    end

    # Retrieve all comments
    # Lists all comments of the given account.
    # @param account_id [String] Unique ID of the connected account.
    # @param content_id [String] Unique ID of the content item.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10. (default to 10)
    # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0. (default to 0)
    # @option opts [Date] :to_date Return comments published on or before this date. (YYYY-MM-DD)
    # @option opts [Date] :from_date Return comments published on or after this date. (YYYY-MM-DD)
    # @return [Array<(CommentResponse, Integer, Hash)>] CommentResponse data, response status code and response headers
    def v1_engagement_get_comments_with_http_info(account_id, content_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EngagementApi.v1_engagement_get_comments ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling EngagementApi.v1_engagement_get_comments"
      end
      # verify the required parameter 'content_id' is set
      if @api_client.config.client_side_validation && content_id.nil?
        fail ArgumentError, "Missing the required parameter 'content_id' when calling EngagementApi.v1_engagement_get_comments"
      end
      # resource path
      local_var_path = '/v1/social/comments'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'account_id'] = account_id
      query_params[:'content_id'] = content_id
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'to_date'] = opts[:'to_date'] if !opts[:'to_date'].nil?
      query_params[:'from_date'] = opts[:'from_date'] if !opts[:'from_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CommentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic Authentication']

      new_options = opts.merge(
        :operation => :"EngagementApi.v1_engagement_get_comments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EngagementApi#v1_engagement_get_comments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch historic content groups
    # Fetch content groups for a connected account starting from a specific date till today by providing the `from_date`. Once Phyllo processes the request, you can fetch the updated content groups by calling the [retrieve content groups API](../reference/openapi.v1.yml/paths/~1v1~1social~1content-groups/get).   Subscribe to the \"CONTENT-GROUPS.ADDED\" and \"CONTENT-GROUPS.UPDATED\" webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve content groups in bulk API](../reference/openapi.v1.yml/paths/~1v1~1social~1content-groups~1search/post) for optimal performance.
    # @param [Hash] opts the optional parameters
    # @option opts [FetchHistoric1] :fetch_historic1 
    # @return [FetchHistoric1]
    def v1_fetch_historic_social_content_groups(opts = {})
      data, _status_code, _headers = v1_fetch_historic_social_content_groups_with_http_info(opts)
      data
    end

    # Fetch historic content groups
    # Fetch content groups for a connected account starting from a specific date till today by providing the &#x60;from_date&#x60;. Once Phyllo processes the request, you can fetch the updated content groups by calling the [retrieve content groups API](../reference/openapi.v1.yml/paths/~1v1~1social~1content-groups/get).   Subscribe to the \&quot;CONTENT-GROUPS.ADDED\&quot; and \&quot;CONTENT-GROUPS.UPDATED\&quot; webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve content groups in bulk API](../reference/openapi.v1.yml/paths/~1v1~1social~1content-groups~1search/post) for optimal performance.
    # @param [Hash] opts the optional parameters
    # @option opts [FetchHistoric1] :fetch_historic1 
    # @return [Array<(FetchHistoric1, Integer, Hash)>] FetchHistoric1 data, response status code and response headers
    def v1_fetch_historic_social_content_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EngagementApi.v1_fetch_historic_social_content_groups ...'
      end
      # resource path
      local_var_path = '/v1/social/content-groups/fetch-historic'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'fetch_historic1'])

      # return_type
      return_type = opts[:debug_return_type] || 'FetchHistoric1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic Authentication']

      new_options = opts.merge(
        :operation => :"EngagementApi.v1_fetch_historic_social_content_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EngagementApi#v1_fetch_historic_social_content_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch historic content items
    # Fetch content items for a connected account starting from a specific date till today by providing the `from_date`. Once Phyllo processes the request, you can fetch the updated content items by calling the [retrieve content API](../reference/openapi.v1.yml/paths/~1v1~1social~1contents/get).   Subscribe to the \"CONTENTS.ADDED\" and \"CONTENTS.UPDATED\" webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve content items in bulk API](../reference/openapi.v1.yml/paths/~1v1~1social~1contents~1search/post) for optimal performance.
    # @param [Hash] opts the optional parameters
    # @option opts [FetchHistoric1] :fetch_historic1 
    # @return [FetchHistoric1]
    def v1_fetch_historic_social_contents(opts = {})
      data, _status_code, _headers = v1_fetch_historic_social_contents_with_http_info(opts)
      data
    end

    # Fetch historic content items
    # Fetch content items for a connected account starting from a specific date till today by providing the &#x60;from_date&#x60;. Once Phyllo processes the request, you can fetch the updated content items by calling the [retrieve content API](../reference/openapi.v1.yml/paths/~1v1~1social~1contents/get).   Subscribe to the \&quot;CONTENTS.ADDED\&quot; and \&quot;CONTENTS.UPDATED\&quot; webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve content items in bulk API](../reference/openapi.v1.yml/paths/~1v1~1social~1contents~1search/post) for optimal performance.
    # @param [Hash] opts the optional parameters
    # @option opts [FetchHistoric1] :fetch_historic1 
    # @return [Array<(FetchHistoric1, Integer, Hash)>] FetchHistoric1 data, response status code and response headers
    def v1_fetch_historic_social_contents_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EngagementApi.v1_fetch_historic_social_contents ...'
      end
      # resource path
      local_var_path = '/v1/social/contents/fetch-historic'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/xml'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'fetch_historic1'])

      # return_type
      return_type = opts[:debug_return_type] || 'FetchHistoric1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic Authentication']

      new_options = opts.merge(
        :operation => :"EngagementApi.v1_fetch_historic_social_contents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EngagementApi#v1_fetch_historic_social_contents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Refresh content groups
    # Refresh content groups for a connected account for the default refresh period, which is T-90 days for content groups. Once Phyllo processes the request, you can fetch the updated content items by calling the [retrieve content groups API](../reference/openapi.v1.yml/paths/~1v1~1social~1content-groups/get).   Subscribe to the \"CONTENT-GROUPS.ADDED\" and \"CONTENT-GROUPS.UPDATED\" webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve content groups in bulk API](../reference/openapi.v1.yml/paths/~1v1~1social~1content-groups~1search/post) for optimal performance.
    # @param [Hash] opts the optional parameters
    # @option opts [Refresh1] :refresh1 
    # @return [Refresh1]
    def v1_refresh_social_content_groups(opts = {})
      data, _status_code, _headers = v1_refresh_social_content_groups_with_http_info(opts)
      data
    end

    # Refresh content groups
    # Refresh content groups for a connected account for the default refresh period, which is T-90 days for content groups. Once Phyllo processes the request, you can fetch the updated content items by calling the [retrieve content groups API](../reference/openapi.v1.yml/paths/~1v1~1social~1content-groups/get).   Subscribe to the \&quot;CONTENT-GROUPS.ADDED\&quot; and \&quot;CONTENT-GROUPS.UPDATED\&quot; webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve content groups in bulk API](../reference/openapi.v1.yml/paths/~1v1~1social~1content-groups~1search/post) for optimal performance.
    # @param [Hash] opts the optional parameters
    # @option opts [Refresh1] :refresh1 
    # @return [Array<(Refresh1, Integer, Hash)>] Refresh1 data, response status code and response headers
    def v1_refresh_social_content_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EngagementApi.v1_refresh_social_content_groups ...'
      end
      # resource path
      local_var_path = '/v1/social/content-groups/refresh'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/xml'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'refresh1'])

      # return_type
      return_type = opts[:debug_return_type] || 'Refresh1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic Authentication']

      new_options = opts.merge(
        :operation => :"EngagementApi.v1_refresh_social_content_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EngagementApi#v1_refresh_social_content_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Refresh content items
    # Refresh content items for a connected account for the default refresh period, which is T-90 days for content items. Once Phyllo processes the request, you can fetch the updated content items by calling the [retrieve content API](../reference/openapi.v1.yml/paths/~1v1~1social~1contents/get).   Subscribe to the \"CONTENTS.ADDED\" and \"CONTENTS.UPDATED\" webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve content items in bulk API](../reference/openapi.v1.yml/paths/~1v1~1social~1contents~1search/post) for optimal performance.
    # @param [Hash] opts the optional parameters
    # @option opts [Refresh1] :refresh1 
    # @return [Refresh1]
    def v1_refresh_social_contents(opts = {})
      data, _status_code, _headers = v1_refresh_social_contents_with_http_info(opts)
      data
    end

    # Refresh content items
    # Refresh content items for a connected account for the default refresh period, which is T-90 days for content items. Once Phyllo processes the request, you can fetch the updated content items by calling the [retrieve content API](../reference/openapi.v1.yml/paths/~1v1~1social~1contents/get).   Subscribe to the \&quot;CONTENTS.ADDED\&quot; and \&quot;CONTENTS.UPDATED\&quot; webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve content items in bulk API](../reference/openapi.v1.yml/paths/~1v1~1social~1contents~1search/post) for optimal performance.
    # @param [Hash] opts the optional parameters
    # @option opts [Refresh1] :refresh1 
    # @return [Array<(Refresh1, Integer, Hash)>] Refresh1 data, response status code and response headers
    def v1_refresh_social_contents_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EngagementApi.v1_refresh_social_contents ...'
      end
      # resource path
      local_var_path = '/v1/social/contents/refresh'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/xml'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'refresh1'])

      # return_type
      return_type = opts[:debug_return_type] || 'Refresh1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic Authentication']

      new_options = opts.merge(
        :operation => :"EngagementApi.v1_refresh_social_contents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EngagementApi#v1_refresh_social_contents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all content groups
    # Returns all Content Groups objects.
    # @param account_id [String] Unique ID of the connected account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0. (default to 0)
    # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10. (default to 10)
    # @option opts [Date] :from_date Return content items published on or after this date. (YYYY-MM-DD)
    # @option opts [Date] :to_date Return content items published on or before this date. (YYYY-MM-DD)
    # @return [ContentGroupList1]
    def v1_stream_get_content_groups(account_id, opts = {})
      data, _status_code, _headers = v1_stream_get_content_groups_with_http_info(account_id, opts)
      data
    end

    # Retrieve all content groups
    # Returns all Content Groups objects.
    # @param account_id [String] Unique ID of the connected account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0. (default to 0)
    # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10. (default to 10)
    # @option opts [Date] :from_date Return content items published on or after this date. (YYYY-MM-DD)
    # @option opts [Date] :to_date Return content items published on or before this date. (YYYY-MM-DD)
    # @return [Array<(ContentGroupList1, Integer, Hash)>] ContentGroupList1 data, response status code and response headers
    def v1_stream_get_content_groups_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EngagementApi.v1_stream_get_content_groups ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling EngagementApi.v1_stream_get_content_groups"
      end
      # resource path
      local_var_path = '/v1/social/content-groups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'account_id'] = account_id
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'from_date'] = opts[:'from_date'] if !opts[:'from_date'].nil?
      query_params[:'to_date'] = opts[:'to_date'] if !opts[:'to_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ContentGroupList1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic Authentication']

      new_options = opts.merge(
        :operation => :"EngagementApi.v1_stream_get_content_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EngagementApi#v1_stream_get_content_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a content group
    # Retrieve the information of the Content Group with the supplied Content Group id.
    # @param id [String] Unique identifier for the content group
    # @param [Hash] opts the optional parameters
    # @return [ContentGroup1]
    def v1_stream_get_content_groups_by_id(id, opts = {})
      data, _status_code, _headers = v1_stream_get_content_groups_by_id_with_http_info(id, opts)
      data
    end

    # Retrieve a content group
    # Retrieve the information of the Content Group with the supplied Content Group id.
    # @param id [String] Unique identifier for the content group
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContentGroup1, Integer, Hash)>] ContentGroup1 data, response status code and response headers
    def v1_stream_get_content_groups_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EngagementApi.v1_stream_get_content_groups_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EngagementApi.v1_stream_get_content_groups_by_id"
      end
      # resource path
      local_var_path = '/v1/social/content-groups/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ContentGroup1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic Authentication']

      new_options = opts.merge(
        :operation => :"EngagementApi.v1_stream_get_content_groups_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EngagementApi#v1_stream_get_content_groups_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all content items
    # Lists all Contents.
    # @param account_id [String] Unique ID of the connected account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0. (default to 0)
    # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10. (default to 10)
    # @option opts [Date] :from_date Return content items published on or after this date. (YYYY-MM-DD)
    # @option opts [Date] :to_date Return content items published on or before this date. (YYYY-MM-DD)
    # @return [ContentList1]
    def v1_stream_get_contents(account_id, opts = {})
      data, _status_code, _headers = v1_stream_get_contents_with_http_info(account_id, opts)
      data
    end

    # Retrieve all content items
    # Lists all Contents.
    # @param account_id [String] Unique ID of the connected account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0. (default to 0)
    # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10. (default to 10)
    # @option opts [Date] :from_date Return content items published on or after this date. (YYYY-MM-DD)
    # @option opts [Date] :to_date Return content items published on or before this date. (YYYY-MM-DD)
    # @return [Array<(ContentList1, Integer, Hash)>] ContentList1 data, response status code and response headers
    def v1_stream_get_contents_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EngagementApi.v1_stream_get_contents ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling EngagementApi.v1_stream_get_contents"
      end
      # resource path
      local_var_path = '/v1/social/contents'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'account_id'] = account_id
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'from_date'] = opts[:'from_date'] if !opts[:'from_date'].nil?
      query_params[:'to_date'] = opts[:'to_date'] if !opts[:'to_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ContentList1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic Authentication']

      new_options = opts.merge(
        :operation => :"EngagementApi.v1_stream_get_contents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EngagementApi#v1_stream_get_contents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a content item
    # Retrieve the information of the Content with the supplied Content id.
    # @param id [String] Unique identifier for the content
    # @param [Hash] opts the optional parameters
    # @return [Content1]
    def v1_stream_get_contents_by_id(id, opts = {})
      data, _status_code, _headers = v1_stream_get_contents_by_id_with_http_info(id, opts)
      data
    end

    # Retrieve a content item
    # Retrieve the information of the Content with the supplied Content id.
    # @param id [String] Unique identifier for the content
    # @param [Hash] opts the optional parameters
    # @return [Array<(Content1, Integer, Hash)>] Content1 data, response status code and response headers
    def v1_stream_get_contents_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EngagementApi.v1_stream_get_contents_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EngagementApi.v1_stream_get_contents_by_id"
      end
      # resource path
      local_var_path = '/v1/social/contents/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Content1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic Authentication']

      new_options = opts.merge(
        :operation => :"EngagementApi.v1_stream_get_contents_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EngagementApi#v1_stream_get_contents_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all publication content items
    # Lists all publication posts.
    # @param account_id [String] Unique ID of the connected account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0. (default to 0)
    # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10. (default to 10)
    # @return [ContentList1]
    def v1_streampub_get_contents(account_id, opts = {})
      data, _status_code, _headers = v1_streampub_get_contents_with_http_info(account_id, opts)
      data
    end

    # Retrieve all publication content items
    # Lists all publication posts.
    # @param account_id [String] Unique ID of the connected account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0. (default to 0)
    # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10. (default to 10)
    # @return [Array<(ContentList1, Integer, Hash)>] ContentList1 data, response status code and response headers
    def v1_streampub_get_contents_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EngagementApi.v1_streampub_get_contents ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling EngagementApi.v1_streampub_get_contents"
      end
      # resource path
      local_var_path = '/v1/publications/contents'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'account_id'] = account_id
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ContentList1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic Authentication']

      new_options = opts.merge(
        :operation => :"EngagementApi.v1_streampub_get_contents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EngagementApi#v1_streampub_get_contents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a publication content item
    # Retrieve the engagement information of the newsletter publication with the supplied content id.
    # @param id [String] Unique identifier for the content
    # @param [Hash] opts the optional parameters
    # @return [Content1]
    def v1_streampub_get_contents_by_id(id, opts = {})
      data, _status_code, _headers = v1_streampub_get_contents_by_id_with_http_info(id, opts)
      data
    end

    # Retrieve a publication content item
    # Retrieve the engagement information of the newsletter publication with the supplied content id.
    # @param id [String] Unique identifier for the content
    # @param [Hash] opts the optional parameters
    # @return [Array<(Content1, Integer, Hash)>] Content1 data, response status code and response headers
    def v1_streampub_get_contents_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EngagementApi.v1_streampub_get_contents_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EngagementApi.v1_streampub_get_contents_by_id"
      end
      # resource path
      local_var_path = '/v1/publications/contents/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Content1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic Authentication']

      new_options = opts.merge(
        :operation => :"EngagementApi.v1_streampub_get_contents_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EngagementApi#v1_streampub_get_contents_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
