# #API References
#
# The **Phyllo API** is built on RESTful principles and returns JSON encoded responses and accepts JSON payloads. It is only available through HTTPS to ensure the security of the data in transfer. These APIs must be called only from your server and never from your app / frontend as this is a security concern.  The API operates in three environments: **sandbox**, **staging** and **production**.  The sandbox environment returns mock data and is used for testing the basic functionality of the system.  The staging environment is exactly like a production environment but with certain limitations. It is used for your internal testing and development purposes.  The production environment connects to real platform accounts and all data reads and writes are made to live accounts. This is what you would use to get data for your customers.
#
# The version of the OpenAPI document: v1.0
# Contact: support@getphyllo.com
# Generated by: https://openapi-generator.tech
# Generator version: 7.6.0
#

require "cgi"

module Phyllo
  class IncomeApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Fetch historic e-commerce balances for an account
    # Fetch balances for a connected e-commerce account starting from a specific date till today by providing the `from_date`. Once Phyllo processes the request, you can fetch the updated balances by calling the [retrieve e-commerce balances API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1balances/get).   Subscribe to the \"BALANCES.ADDED\" and \"BALANCES.UPDATED\" webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve e-commerce balances in bulk API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1balances~1search/post) for optimal performance.   Check the `category` field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \"Category\" column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \"commerce\".
    # @param [Hash] opts the optional parameters
    # @option opts [FetchHistoric1] :fetch_historic1
    # @return [FetchHistoric1]
    def v1_fetch_historic_commerce_income_balances(opts = {})
      data, _status_code, _headers = v1_fetch_historic_commerce_income_balances_with_http_info(opts)
      data
    end

    # Fetch historic e-commerce balances for an account
    # Fetch balances for a connected e-commerce account starting from a specific date till today by providing the &#x60;from_date&#x60;. Once Phyllo processes the request, you can fetch the updated balances by calling the [retrieve e-commerce balances API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1balances/get).   Subscribe to the \&quot;BALANCES.ADDED\&quot; and \&quot;BALANCES.UPDATED\&quot; webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve e-commerce balances in bulk API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1balances~1search/post) for optimal performance.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;commerce\&quot;.
    # @param [Hash] opts the optional parameters
    # @option opts [FetchHistoric1] :fetch_historic1
    # @return [Array<(FetchHistoric1, Integer, Hash)>] FetchHistoric1 data, response status code and response headers
    def v1_fetch_historic_commerce_income_balances_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IncomeApi.v1_fetch_historic_commerce_income_balances ..."
      end
      # resource path
      local_var_path = "/v1/commerce/income/balances/fetch-historic"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:fetch_historic1])

      # return_type
      return_type = opts[:debug_return_type] || "FetchHistoric1"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["Basic Authentication"]

      new_options = opts.merge(
        operation: :"IncomeApi.v1_fetch_historic_commerce_income_balances",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncomeApi#v1_fetch_historic_commerce_income_balances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Fetch historic e-commerce payouts for an account
    # Fetch payouts for a connected e-commerce account starting from a specific date till today by providing the `from_date`. Once Phyllo processes the request, you can fetch the updated payouts by calling the [retrieve e-commerce payouts API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1payouts/get).   Subscribe to the \"PAYOUTS.ADDED\" and \"PAYOUTS.UPDATED\" webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve e-commerce payouts in bulk API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1payouts~1search/post) for optimal performance.   Check the `category` field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \"Category\" column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \"commerce\".
    # @param [Hash] opts the optional parameters
    # @option opts [FetchHistoric1] :fetch_historic1
    # @return [FetchHistoric1]
    def v1_fetch_historic_commerce_income_payouts(opts = {})
      data, _status_code, _headers = v1_fetch_historic_commerce_income_payouts_with_http_info(opts)
      data
    end

    # Fetch historic e-commerce payouts for an account
    # Fetch payouts for a connected e-commerce account starting from a specific date till today by providing the &#x60;from_date&#x60;. Once Phyllo processes the request, you can fetch the updated payouts by calling the [retrieve e-commerce payouts API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1payouts/get).   Subscribe to the \&quot;PAYOUTS.ADDED\&quot; and \&quot;PAYOUTS.UPDATED\&quot; webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve e-commerce payouts in bulk API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1payouts~1search/post) for optimal performance.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;commerce\&quot;.
    # @param [Hash] opts the optional parameters
    # @option opts [FetchHistoric1] :fetch_historic1
    # @return [Array<(FetchHistoric1, Integer, Hash)>] FetchHistoric1 data, response status code and response headers
    def v1_fetch_historic_commerce_income_payouts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IncomeApi.v1_fetch_historic_commerce_income_payouts ..."
      end
      # resource path
      local_var_path = "/v1/commerce/income/payouts/fetch-historic"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:fetch_historic1])

      # return_type
      return_type = opts[:debug_return_type] || "FetchHistoric1"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["Basic Authentication"]

      new_options = opts.merge(
        operation: :"IncomeApi.v1_fetch_historic_commerce_income_payouts",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncomeApi#v1_fetch_historic_commerce_income_payouts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Fetch historic e-commerce transactions for an account
    # Fetch transactions for a connected e-commerce account starting from a specific date till today by providing the `from_date`. Once Phyllo processes the request, you can fetch the updated transactions by calling the [retrieve e-commerce transactions API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1transactions/get).   Subscribe to the \"TRANSACTIONS.ADDED\" and \"TRANSACTIONS.UPDATED\" webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve e-commerce transactions in bulk API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1transactions~1search/post) for optimal performance.   Check the `category` field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \"Category\" column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \"commerce\".
    # @param [Hash] opts the optional parameters
    # @option opts [FetchHistoric1] :fetch_historic1
    # @return [FetchHistoric1]
    def v1_fetch_historic_commerce_income_transactions(opts = {})
      data, _status_code, _headers = v1_fetch_historic_commerce_income_transactions_with_http_info(opts)
      data
    end

    # Fetch historic e-commerce transactions for an account
    # Fetch transactions for a connected e-commerce account starting from a specific date till today by providing the &#x60;from_date&#x60;. Once Phyllo processes the request, you can fetch the updated transactions by calling the [retrieve e-commerce transactions API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1transactions/get).   Subscribe to the \&quot;TRANSACTIONS.ADDED\&quot; and \&quot;TRANSACTIONS.UPDATED\&quot; webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve e-commerce transactions in bulk API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1transactions~1search/post) for optimal performance.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;commerce\&quot;.
    # @param [Hash] opts the optional parameters
    # @option opts [FetchHistoric1] :fetch_historic1
    # @return [Array<(FetchHistoric1, Integer, Hash)>] FetchHistoric1 data, response status code and response headers
    def v1_fetch_historic_commerce_income_transactions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IncomeApi.v1_fetch_historic_commerce_income_transactions ..."
      end
      # resource path
      local_var_path = "/v1/commerce/income/transactions/fetch-historic"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:fetch_historic1])

      # return_type
      return_type = opts[:debug_return_type] || "FetchHistoric1"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["Basic Authentication"]

      new_options = opts.merge(
        operation: :"IncomeApi.v1_fetch_historic_commerce_income_transactions",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncomeApi#v1_fetch_historic_commerce_income_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Fetch historic social payouts for an account
    # Fetch payouts for a connected social account starting from a specific date till today by providing the `from_date`. Once Phyllo processes the request, you can fetch the updated payouts by calling the [retrieve social payouts API](../reference/openapi.v1.yml/paths/~1v1~1social~1income~1payouts/get).   Subscribe to the \"PAYOUTS.ADDED\" and \"PAYOUTS.UPDATED\" webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve social payouts in bulk API](../reference/openapi.v1.yml/paths/~1v1~1social~1income~1payouts~1search/post) for optimal performance.   Check the `category` field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \"Category\" column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \"social\".
    # @param [Hash] opts the optional parameters
    # @option opts [FetchHistoric1] :fetch_historic1
    # @return [FetchHistoric1]
    def v1_fetch_historic_social_income_payouts(opts = {})
      data, _status_code, _headers = v1_fetch_historic_social_income_payouts_with_http_info(opts)
      data
    end

    # Fetch historic social payouts for an account
    # Fetch payouts for a connected social account starting from a specific date till today by providing the &#x60;from_date&#x60;. Once Phyllo processes the request, you can fetch the updated payouts by calling the [retrieve social payouts API](../reference/openapi.v1.yml/paths/~1v1~1social~1income~1payouts/get).   Subscribe to the \&quot;PAYOUTS.ADDED\&quot; and \&quot;PAYOUTS.UPDATED\&quot; webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve social payouts in bulk API](../reference/openapi.v1.yml/paths/~1v1~1social~1income~1payouts~1search/post) for optimal performance.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;social\&quot;.
    # @param [Hash] opts the optional parameters
    # @option opts [FetchHistoric1] :fetch_historic1
    # @return [Array<(FetchHistoric1, Integer, Hash)>] FetchHistoric1 data, response status code and response headers
    def v1_fetch_historic_social_income_payouts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IncomeApi.v1_fetch_historic_social_income_payouts ..."
      end
      # resource path
      local_var_path = "/v1/social/income/payouts/fetch-historic"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:fetch_historic1])

      # return_type
      return_type = opts[:debug_return_type] || "FetchHistoric1"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["Basic Authentication"]

      new_options = opts.merge(
        operation: :"IncomeApi.v1_fetch_historic_social_income_payouts",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncomeApi#v1_fetch_historic_social_income_payouts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Fetch historic social transactions for an account
    # Fetch transactions for a connected social account starting from a specific date till today by providing the `from_date`. Once Phyllo processes the request, you can fetch the updated transactions by calling the [retrieve social transactions API](../reference/openapi.v1.yml/paths/~1v1~1social~1income~1transactions/get).   Subscribe to the \"TRANSACTIONS.ADDED\" and \"TRANSACTIONS.UPDATED\" webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve social transactions in bulk API](../reference/openapi.v1.yml/paths/~1v1~1social~1income~1transactions~1search/post) for optimal performance.   Check the `category` field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \"Category\" column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \"social\".
    # @param [Hash] opts the optional parameters
    # @option opts [FetchHistoric1] :fetch_historic1
    # @return [FetchHistoric1]
    def v1_fetch_historic_social_income_transactions(opts = {})
      data, _status_code, _headers = v1_fetch_historic_social_income_transactions_with_http_info(opts)
      data
    end

    # Fetch historic social transactions for an account
    # Fetch transactions for a connected social account starting from a specific date till today by providing the &#x60;from_date&#x60;. Once Phyllo processes the request, you can fetch the updated transactions by calling the [retrieve social transactions API](../reference/openapi.v1.yml/paths/~1v1~1social~1income~1transactions/get).   Subscribe to the \&quot;TRANSACTIONS.ADDED\&quot; and \&quot;TRANSACTIONS.UPDATED\&quot; webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve social transactions in bulk API](../reference/openapi.v1.yml/paths/~1v1~1social~1income~1transactions~1search/post) for optimal performance.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;social\&quot;.
    # @param [Hash] opts the optional parameters
    # @option opts [FetchHistoric1] :fetch_historic1
    # @return [Array<(FetchHistoric1, Integer, Hash)>] FetchHistoric1 data, response status code and response headers
    def v1_fetch_historic_social_income_transactions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IncomeApi.v1_fetch_historic_social_income_transactions ..."
      end
      # resource path
      local_var_path = "/v1/social/income/transactions/fetch-historic"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:fetch_historic1])

      # return_type
      return_type = opts[:debug_return_type] || "FetchHistoric1"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["Basic Authentication"]

      new_options = opts.merge(
        operation: :"IncomeApi.v1_fetch_historic_social_income_transactions",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncomeApi#v1_fetch_historic_social_income_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Retrieve a e-commerce balance
    # Retrieve the information of the balance with the supplied balance ID.   Check the `category` field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \"Category\" column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \"commerce\".
    # @param id [String] Unique identifier for the balance
    # @param [Hash] opts the optional parameters
    # @return [CommerceBalance1]
    def v1_get_commerce_income_balance_by_id(id, opts = {})
      data, _status_code, _headers = v1_get_commerce_income_balance_by_id_with_http_info(id, opts)
      data
    end

    # Retrieve a e-commerce balance
    # Retrieve the information of the balance with the supplied balance ID.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;commerce\&quot;.
    # @param id [String] Unique identifier for the balance
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommerceBalance1, Integer, Hash)>] CommerceBalance1 data, response status code and response headers
    def v1_get_commerce_income_balance_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IncomeApi.v1_get_commerce_income_balance_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncomeApi.v1_get_commerce_income_balance_by_id"
      end
      # resource path
      local_var_path = "/v1/commerce/income/balances/{id}".sub("{" + "id" + "}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "CommerceBalance1"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["Basic Authentication"]

      new_options = opts.merge(
        operation: :"IncomeApi.v1_get_commerce_income_balance_by_id",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncomeApi#v1_get_commerce_income_balance_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Retrieve e-commerce balances for an account
    # Lists all daily balances of the given e-commerce account.   Check the `category` field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \"Category\" column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \"commerce\".
    # @param balance_from_date [Date] Return daily balances on or after this date. (YYYY-MM-DD)
    # @param balance_to_date [Date] Return daily balances on or before this date. (YYYY-MM-DD)
    # @param account_id [String] Unique ID of the connected account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10. (default to 10)
    # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0. (default to 0)
    # @return [CommerceBalanceList1]
    def v1_get_commerce_income_balances(balance_from_date, balance_to_date, account_id, opts = {})
      data, _status_code, _headers = v1_get_commerce_income_balances_with_http_info(balance_from_date, balance_to_date, account_id, opts)
      data
    end

    # Retrieve e-commerce balances for an account
    # Lists all daily balances of the given e-commerce account.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;commerce\&quot;.
    # @param balance_from_date [Date] Return daily balances on or after this date. (YYYY-MM-DD)
    # @param balance_to_date [Date] Return daily balances on or before this date. (YYYY-MM-DD)
    # @param account_id [String] Unique ID of the connected account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10. (default to 10)
    # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0. (default to 0)
    # @return [Array<(CommerceBalanceList1, Integer, Hash)>] CommerceBalanceList1 data, response status code and response headers
    def v1_get_commerce_income_balances_with_http_info(balance_from_date, balance_to_date, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IncomeApi.v1_get_commerce_income_balances ..."
      end
      # verify the required parameter 'balance_from_date' is set
      if @api_client.config.client_side_validation && balance_from_date.nil?
        fail ArgumentError, "Missing the required parameter 'balance_from_date' when calling IncomeApi.v1_get_commerce_income_balances"
      end
      # verify the required parameter 'balance_to_date' is set
      if @api_client.config.client_side_validation && balance_to_date.nil?
        fail ArgumentError, "Missing the required parameter 'balance_to_date' when calling IncomeApi.v1_get_commerce_income_balances"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling IncomeApi.v1_get_commerce_income_balances"
      end
      # resource path
      local_var_path = "/v1/commerce/income/balances"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:balance_from_date] = balance_from_date
      query_params[:balance_to_date] = balance_to_date
      query_params[:account_id] = account_id
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "CommerceBalanceList1"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["Basic Authentication"]

      new_options = opts.merge(
        operation: :"IncomeApi.v1_get_commerce_income_balances",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncomeApi#v1_get_commerce_income_balances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Retrieve a e-commerce payout
    # Retrieve the information of the payout with the supplied payout ID.   Check the `category` field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \"Category\" column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \"commerce\".
    # @param id [String] Unique identifier for the payout
    # @param [Hash] opts the optional parameters
    # @return [CommercePayout1]
    def v1_get_commerce_income_payout_by_id(id, opts = {})
      data, _status_code, _headers = v1_get_commerce_income_payout_by_id_with_http_info(id, opts)
      data
    end

    # Retrieve a e-commerce payout
    # Retrieve the information of the payout with the supplied payout ID.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;commerce\&quot;.
    # @param id [String] Unique identifier for the payout
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommercePayout1, Integer, Hash)>] CommercePayout1 data, response status code and response headers
    def v1_get_commerce_income_payout_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IncomeApi.v1_get_commerce_income_payout_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncomeApi.v1_get_commerce_income_payout_by_id"
      end
      # resource path
      local_var_path = "/v1/commerce/income/payouts/{id}".sub("{" + "id" + "}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "CommercePayout1"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["Basic Authentication"]

      new_options = opts.merge(
        operation: :"IncomeApi.v1_get_commerce_income_payout_by_id",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncomeApi#v1_get_commerce_income_payout_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Retrieve e-commerce payouts for an account
    # Lists all payouts of the given e-commerce account.   Check the `category` field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \"Category\" column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \"commerce\".
    # @param payout_from_date [Date] Return payouts on or after this date. (YYYY-MM-DD)
    # @param payout_to_date [Date] Return payouts on or before this date. (YYYY-MM-DD)
    # @param account_id [String] Unique ID of the connected account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10. (default to 10)
    # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0. (default to 0)
    # @return [CommercePayoutList1]
    def v1_get_commerce_income_payouts(payout_from_date, payout_to_date, account_id, opts = {})
      data, _status_code, _headers = v1_get_commerce_income_payouts_with_http_info(payout_from_date, payout_to_date, account_id, opts)
      data
    end

    # Retrieve e-commerce payouts for an account
    # Lists all payouts of the given e-commerce account.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;commerce\&quot;.
    # @param payout_from_date [Date] Return payouts on or after this date. (YYYY-MM-DD)
    # @param payout_to_date [Date] Return payouts on or before this date. (YYYY-MM-DD)
    # @param account_id [String] Unique ID of the connected account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10. (default to 10)
    # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0. (default to 0)
    # @return [Array<(CommercePayoutList1, Integer, Hash)>] CommercePayoutList1 data, response status code and response headers
    def v1_get_commerce_income_payouts_with_http_info(payout_from_date, payout_to_date, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IncomeApi.v1_get_commerce_income_payouts ..."
      end
      # verify the required parameter 'payout_from_date' is set
      if @api_client.config.client_side_validation && payout_from_date.nil?
        fail ArgumentError, "Missing the required parameter 'payout_from_date' when calling IncomeApi.v1_get_commerce_income_payouts"
      end
      # verify the required parameter 'payout_to_date' is set
      if @api_client.config.client_side_validation && payout_to_date.nil?
        fail ArgumentError, "Missing the required parameter 'payout_to_date' when calling IncomeApi.v1_get_commerce_income_payouts"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling IncomeApi.v1_get_commerce_income_payouts"
      end
      # resource path
      local_var_path = "/v1/commerce/income/payouts"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:payout_from_date] = payout_from_date
      query_params[:payout_to_date] = payout_to_date
      query_params[:account_id] = account_id
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "CommercePayoutList1"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["Basic Authentication"]

      new_options = opts.merge(
        operation: :"IncomeApi.v1_get_commerce_income_payouts",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncomeApi#v1_get_commerce_income_payouts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Retrieve a e-commerce transaction
    # Retrieve the information of the transaction with the supplied transaction ID.   Check the `category` field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \"Category\" column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \"commerce\".
    # @param id [String] Unique identifier for the transaction
    # @param [Hash] opts the optional parameters
    # @return [CommerceTransaction1]
    def v1_get_commerce_income_transaction_by_id(id, opts = {})
      data, _status_code, _headers = v1_get_commerce_income_transaction_by_id_with_http_info(id, opts)
      data
    end

    # Retrieve a e-commerce transaction
    # Retrieve the information of the transaction with the supplied transaction ID.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;commerce\&quot;.
    # @param id [String] Unique identifier for the transaction
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommerceTransaction1, Integer, Hash)>] CommerceTransaction1 data, response status code and response headers
    def v1_get_commerce_income_transaction_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IncomeApi.v1_get_commerce_income_transaction_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncomeApi.v1_get_commerce_income_transaction_by_id"
      end
      # resource path
      local_var_path = "/v1/commerce/income/transactions/{id}".sub("{" + "id" + "}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "CommerceTransaction1"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["Basic Authentication"]

      new_options = opts.merge(
        operation: :"IncomeApi.v1_get_commerce_income_transaction_by_id",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncomeApi#v1_get_commerce_income_transaction_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Retrieve e-commerce transactions for an account
    # Lists all transactions of the given e-commerce account.   Check the `category` field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \"Category\" column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \"commerce\".
    # @param transaction_from_date [Date] Return transactions on or after this date. (YYYY-MM-DD)
    # @param transaction_to_date [Date] Return transactions on or before this date. (YYYY-MM-DD)
    # @param account_id [String] Unique ID of the connected account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Type of transaction on the e-commerce platform
    # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10. (default to 10)
    # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0. (default to 0)
    # @return [CommerceTransactionList1]
    def v1_get_commerce_income_transactions(transaction_from_date, transaction_to_date, account_id, opts = {})
      data, _status_code, _headers = v1_get_commerce_income_transactions_with_http_info(transaction_from_date, transaction_to_date, account_id, opts)
      data
    end

    # Retrieve e-commerce transactions for an account
    # Lists all transactions of the given e-commerce account.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;commerce\&quot;.
    # @param transaction_from_date [Date] Return transactions on or after this date. (YYYY-MM-DD)
    # @param transaction_to_date [Date] Return transactions on or before this date. (YYYY-MM-DD)
    # @param account_id [String] Unique ID of the connected account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Type of transaction on the e-commerce platform
    # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10. (default to 10)
    # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0. (default to 0)
    # @return [Array<(CommerceTransactionList1, Integer, Hash)>] CommerceTransactionList1 data, response status code and response headers
    def v1_get_commerce_income_transactions_with_http_info(transaction_from_date, transaction_to_date, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IncomeApi.v1_get_commerce_income_transactions ..."
      end
      # verify the required parameter 'transaction_from_date' is set
      if @api_client.config.client_side_validation && transaction_from_date.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_from_date' when calling IncomeApi.v1_get_commerce_income_transactions"
      end
      # verify the required parameter 'transaction_to_date' is set
      if @api_client.config.client_side_validation && transaction_to_date.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_to_date' when calling IncomeApi.v1_get_commerce_income_transactions"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling IncomeApi.v1_get_commerce_income_transactions"
      end
      allowable_values = ["SALE", "REFUND", "CANCELLED", "VOID", "OTHER"]
      if @api_client.config.client_side_validation && opts[:type] && !allowable_values.include?(opts[:type])
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = "/v1/commerce/income/transactions"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:transaction_from_date] = transaction_from_date
      query_params[:transaction_to_date] = transaction_to_date
      query_params[:account_id] = account_id
      query_params[:type] = opts[:type] if !opts[:type].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "CommerceTransactionList1"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["Basic Authentication"]

      new_options = opts.merge(
        operation: :"IncomeApi.v1_get_commerce_income_transactions",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncomeApi#v1_get_commerce_income_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Retrieve a social payout
    # Retrieve the information of the payout with the supplied payout ID.   Check the `category` field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get/get) response or the \"Category\" column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \"social\".
    # @param id [String] Unique identifier for the transaction
    # @param [Hash] opts the optional parameters
    # @return [CommercePayout1]
    def v1_get_social_income_payout_by_id(id, opts = {})
      data, _status_code, _headers = v1_get_social_income_payout_by_id_with_http_info(id, opts)
      data
    end

    # Retrieve a social payout
    # Retrieve the information of the payout with the supplied payout ID.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;social\&quot;.
    # @param id [String] Unique identifier for the transaction
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommercePayout1, Integer, Hash)>] CommercePayout1 data, response status code and response headers
    def v1_get_social_income_payout_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IncomeApi.v1_get_social_income_payout_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncomeApi.v1_get_social_income_payout_by_id"
      end
      # resource path
      local_var_path = "/v1/social/income/payouts/{id}".sub("{" + "id" + "}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "CommercePayout1"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["Basic Authentication"]

      new_options = opts.merge(
        operation: :"IncomeApi.v1_get_social_income_payout_by_id",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncomeApi#v1_get_social_income_payout_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Retrieve social payouts for an account
    # Lists all payouts of the given social account.   Check the `category` field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \"Category\" column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \"social\".
    # @param payout_from_date [Date] Return payouts on or after this date. (YYYY-MM-DD)
    # @param payout_to_date [Date] Return payouts on or before this date. (YYYY-MM-DD)
    # @param account_id [String] Unique ID of the connected account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10. (default to 10)
    # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0. (default to 0)
    # @return [CommercePayoutList1]
    def v1_get_social_income_payouts(payout_from_date, payout_to_date, account_id, opts = {})
      data, _status_code, _headers = v1_get_social_income_payouts_with_http_info(payout_from_date, payout_to_date, account_id, opts)
      data
    end

    # Retrieve social payouts for an account
    # Lists all payouts of the given social account.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;social\&quot;.
    # @param payout_from_date [Date] Return payouts on or after this date. (YYYY-MM-DD)
    # @param payout_to_date [Date] Return payouts on or before this date. (YYYY-MM-DD)
    # @param account_id [String] Unique ID of the connected account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10. (default to 10)
    # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0. (default to 0)
    # @return [Array<(CommercePayoutList1, Integer, Hash)>] CommercePayoutList1 data, response status code and response headers
    def v1_get_social_income_payouts_with_http_info(payout_from_date, payout_to_date, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IncomeApi.v1_get_social_income_payouts ..."
      end
      # verify the required parameter 'payout_from_date' is set
      if @api_client.config.client_side_validation && payout_from_date.nil?
        fail ArgumentError, "Missing the required parameter 'payout_from_date' when calling IncomeApi.v1_get_social_income_payouts"
      end
      # verify the required parameter 'payout_to_date' is set
      if @api_client.config.client_side_validation && payout_to_date.nil?
        fail ArgumentError, "Missing the required parameter 'payout_to_date' when calling IncomeApi.v1_get_social_income_payouts"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling IncomeApi.v1_get_social_income_payouts"
      end
      # resource path
      local_var_path = "/v1/social/income/payouts"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:payout_from_date] = payout_from_date
      query_params[:payout_to_date] = payout_to_date
      query_params[:account_id] = account_id
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "CommercePayoutList1"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["Basic Authentication"]

      new_options = opts.merge(
        operation: :"IncomeApi.v1_get_social_income_payouts",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncomeApi#v1_get_social_income_payouts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Retrieve a social transaction
    # Retrieve the information of the transaction with the supplied transaction ID.   Check the `category` field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get/get) response or the \"Category\" column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \"social\".
    # @param id [String] Unique identifier for the transaction
    # @param [Hash] opts the optional parameters
    # @return [SocialTransaction1]
    def v1_get_social_income_transaction_by_id(id, opts = {})
      data, _status_code, _headers = v1_get_social_income_transaction_by_id_with_http_info(id, opts)
      data
    end

    # Retrieve a social transaction
    # Retrieve the information of the transaction with the supplied transaction ID.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;social\&quot;.
    # @param id [String] Unique identifier for the transaction
    # @param [Hash] opts the optional parameters
    # @return [Array<(SocialTransaction1, Integer, Hash)>] SocialTransaction1 data, response status code and response headers
    def v1_get_social_income_transaction_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IncomeApi.v1_get_social_income_transaction_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncomeApi.v1_get_social_income_transaction_by_id"
      end
      # resource path
      local_var_path = "/v1/social/income/transactions/{id}".sub("{" + "id" + "}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "SocialTransaction1"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["Basic Authentication"]

      new_options = opts.merge(
        operation: :"IncomeApi.v1_get_social_income_transaction_by_id",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncomeApi#v1_get_social_income_transaction_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Retrieve social transactions for an account
    # Lists all transactions of the given social account.   Check the `category` field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \"Category\" column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \"social\".
    # @param transaction_from_date [Date] Return transactions on or after this date. (YYYY-MM-DD)
    # @param transaction_to_date [Date] Return transactions on or before this date. (YYYY-MM-DD)
    # @param account_id [String] Unique ID of the connected account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Type of transaction on the social platform
    # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10. (default to 10)
    # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0. (default to 0)
    # @return [SocialTransactionList1]
    def v1_get_social_income_transactions(transaction_from_date, transaction_to_date, account_id, opts = {})
      data, _status_code, _headers = v1_get_social_income_transactions_with_http_info(transaction_from_date, transaction_to_date, account_id, opts)
      data
    end

    # Retrieve social transactions for an account
    # Lists all transactions of the given social account.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;social\&quot;.
    # @param transaction_from_date [Date] Return transactions on or after this date. (YYYY-MM-DD)
    # @param transaction_to_date [Date] Return transactions on or before this date. (YYYY-MM-DD)
    # @param account_id [String] Unique ID of the connected account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Type of transaction on the social platform
    # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10. (default to 10)
    # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0. (default to 0)
    # @return [Array<(SocialTransactionList1, Integer, Hash)>] SocialTransactionList1 data, response status code and response headers
    def v1_get_social_income_transactions_with_http_info(transaction_from_date, transaction_to_date, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IncomeApi.v1_get_social_income_transactions ..."
      end
      # verify the required parameter 'transaction_from_date' is set
      if @api_client.config.client_side_validation && transaction_from_date.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_from_date' when calling IncomeApi.v1_get_social_income_transactions"
      end
      # verify the required parameter 'transaction_to_date' is set
      if @api_client.config.client_side_validation && transaction_to_date.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_to_date' when calling IncomeApi.v1_get_social_income_transactions"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling IncomeApi.v1_get_social_income_transactions"
      end
      allowable_values = ["AD", "SUBSCRIPTION", "ADDITIONAL"]
      if @api_client.config.client_side_validation && opts[:type] && !allowable_values.include?(opts[:type])
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = "/v1/social/income/transactions"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:transaction_from_date] = transaction_from_date
      query_params[:transaction_to_date] = transaction_to_date
      query_params[:account_id] = account_id
      query_params[:type] = opts[:type] if !opts[:type].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "SocialTransactionList1"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["Basic Authentication"]

      new_options = opts.merge(
        operation: :"IncomeApi.v1_get_social_income_transactions",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncomeApi#v1_get_social_income_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Refresh e-commerce balances for an account
    # Refresh balances for a connected e-commerce account for the default refresh period, which is T-12 months for balances. Once Phyllo processes the request, you can fetch the updated balances by calling the [retrieve e-commerce balances API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1balances/get).   Subscribe to the \"BALANCES.ADDED\" and \"BALANCES.UPDATED\" webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve e-commerce balances in bulk API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1balances~1search/post) for optimal performance.   Check the `category` field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \"Category\" column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \"commerce\".
    # @param [Hash] opts the optional parameters
    # @option opts [Refresh1] :refresh1
    # @return [Refresh1]
    def v1_refresh_commerce_income_balances(opts = {})
      data, _status_code, _headers = v1_refresh_commerce_income_balances_with_http_info(opts)
      data
    end

    # Refresh e-commerce balances for an account
    # Refresh balances for a connected e-commerce account for the default refresh period, which is T-12 months for balances. Once Phyllo processes the request, you can fetch the updated balances by calling the [retrieve e-commerce balances API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1balances/get).   Subscribe to the \&quot;BALANCES.ADDED\&quot; and \&quot;BALANCES.UPDATED\&quot; webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve e-commerce balances in bulk API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1balances~1search/post) for optimal performance.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;commerce\&quot;.
    # @param [Hash] opts the optional parameters
    # @option opts [Refresh1] :refresh1
    # @return [Array<(Refresh1, Integer, Hash)>] Refresh1 data, response status code and response headers
    def v1_refresh_commerce_income_balances_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IncomeApi.v1_refresh_commerce_income_balances ..."
      end
      # resource path
      local_var_path = "/v1/commerce/income/balances/refresh"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:refresh1])

      # return_type
      return_type = opts[:debug_return_type] || "Refresh1"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["Basic Authentication"]

      new_options = opts.merge(
        operation: :"IncomeApi.v1_refresh_commerce_income_balances",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncomeApi#v1_refresh_commerce_income_balances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Refresh e-commerce payouts for an account
    # Refresh payouts for a connected e-commerce account for the default refresh period, which is T-12 months for payouts. Once Phyllo processes the request, you can fetch the updated payouts by calling the [retrieve e-commerce payouts API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1payouts/get).   Subscribe to the \"PAYOUTS.ADDED\" and \"PAYOUTS.UPDATED\" webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve e-commerce payouts in bulk API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1payouts~1search/post) for optimal performance.   Check the `category` field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \"Category\" column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \"commerce\".
    # @param [Hash] opts the optional parameters
    # @option opts [Refresh1] :refresh1
    # @return [Refresh1]
    def v1_refresh_commerce_income_payouts(opts = {})
      data, _status_code, _headers = v1_refresh_commerce_income_payouts_with_http_info(opts)
      data
    end

    # Refresh e-commerce payouts for an account
    # Refresh payouts for a connected e-commerce account for the default refresh period, which is T-12 months for payouts. Once Phyllo processes the request, you can fetch the updated payouts by calling the [retrieve e-commerce payouts API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1payouts/get).   Subscribe to the \&quot;PAYOUTS.ADDED\&quot; and \&quot;PAYOUTS.UPDATED\&quot; webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve e-commerce payouts in bulk API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1payouts~1search/post) for optimal performance.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;commerce\&quot;.
    # @param [Hash] opts the optional parameters
    # @option opts [Refresh1] :refresh1
    # @return [Array<(Refresh1, Integer, Hash)>] Refresh1 data, response status code and response headers
    def v1_refresh_commerce_income_payouts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IncomeApi.v1_refresh_commerce_income_payouts ..."
      end
      # resource path
      local_var_path = "/v1/commerce/income/payouts/refresh"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:refresh1])

      # return_type
      return_type = opts[:debug_return_type] || "Refresh1"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["Basic Authentication"]

      new_options = opts.merge(
        operation: :"IncomeApi.v1_refresh_commerce_income_payouts",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncomeApi#v1_refresh_commerce_income_payouts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Refresh e-commerce transactions for an account
    # Refresh transactions for a connected e-commerce account for the default refresh period, which is T-12 months for transactions. Once Phyllo processes the request, you can fetch the updated transactions by calling the [retrieve e-commerce transactions API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1transactions/get).   Subscribe to the \"TRANSACTIONS.ADDED\" and \"TRANSACTIONS.UPDATED\" webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve e-commerce transactions in bulk API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1transactions~1search/post) for optimal performance.   Check the `category` field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \"Category\" column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \"commerce\".
    # @param [Hash] opts the optional parameters
    # @option opts [Refresh1] :refresh1
    # @return [Refresh1]
    def v1_refresh_commerce_income_transactions(opts = {})
      data, _status_code, _headers = v1_refresh_commerce_income_transactions_with_http_info(opts)
      data
    end

    # Refresh e-commerce transactions for an account
    # Refresh transactions for a connected e-commerce account for the default refresh period, which is T-12 months for transactions. Once Phyllo processes the request, you can fetch the updated transactions by calling the [retrieve e-commerce transactions API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1transactions/get).   Subscribe to the \&quot;TRANSACTIONS.ADDED\&quot; and \&quot;TRANSACTIONS.UPDATED\&quot; webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve e-commerce transactions in bulk API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1transactions~1search/post) for optimal performance.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;commerce\&quot;.
    # @param [Hash] opts the optional parameters
    # @option opts [Refresh1] :refresh1
    # @return [Array<(Refresh1, Integer, Hash)>] Refresh1 data, response status code and response headers
    def v1_refresh_commerce_income_transactions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IncomeApi.v1_refresh_commerce_income_transactions ..."
      end
      # resource path
      local_var_path = "/v1/commerce/income/transactions/refresh"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:refresh1])

      # return_type
      return_type = opts[:debug_return_type] || "Refresh1"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["Basic Authentication"]

      new_options = opts.merge(
        operation: :"IncomeApi.v1_refresh_commerce_income_transactions",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncomeApi#v1_refresh_commerce_income_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Refresh social payouts for an account
    # Refresh payouts for a connected social account for the default refresh period, which is T-12 months for payouts. Once Phyllo processes the request, you can fetch the updated payouts by calling the [retrieve social payouts API](../reference/openapi.v1.yml/paths/~1v1~1social~1income~1payouts/get).   Subscribe to the \"PAYOUTS.ADDED\" and \"PAYOUTS.UPDATED\" webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve social payouts in bulk API](../reference/openapi.v1.yml/paths/~1v1~1social~1income~1payouts~1search/post) for optimal performance.   Check the `category` field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \"Category\" column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \"social\".
    # @param [Hash] opts the optional parameters
    # @option opts [Refresh1] :refresh1
    # @return [Refresh1]
    def v1_refresh_social_income_payouts(opts = {})
      data, _status_code, _headers = v1_refresh_social_income_payouts_with_http_info(opts)
      data
    end

    # Refresh social payouts for an account
    # Refresh payouts for a connected social account for the default refresh period, which is T-12 months for payouts. Once Phyllo processes the request, you can fetch the updated payouts by calling the [retrieve social payouts API](../reference/openapi.v1.yml/paths/~1v1~1social~1income~1payouts/get).   Subscribe to the \&quot;PAYOUTS.ADDED\&quot; and \&quot;PAYOUTS.UPDATED\&quot; webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve social payouts in bulk API](../reference/openapi.v1.yml/paths/~1v1~1social~1income~1payouts~1search/post) for optimal performance.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;social\&quot;.
    # @param [Hash] opts the optional parameters
    # @option opts [Refresh1] :refresh1
    # @return [Array<(Refresh1, Integer, Hash)>] Refresh1 data, response status code and response headers
    def v1_refresh_social_income_payouts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IncomeApi.v1_refresh_social_income_payouts ..."
      end
      # resource path
      local_var_path = "/v1/social/income/payouts/refresh"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:refresh1])

      # return_type
      return_type = opts[:debug_return_type] || "Refresh1"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["Basic Authentication"]

      new_options = opts.merge(
        operation: :"IncomeApi.v1_refresh_social_income_payouts",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncomeApi#v1_refresh_social_income_payouts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Refresh social transactions for an account
    # Refresh transactions for a connected social account for the default refresh period, which is T-12 months for transactions. Once Phyllo processes the request, you can fetch the updated transactions by calling the [retrieve social transactions API](../reference/openapi.v1.yml/paths/~1v1~1social~1income~1transactions/get).   Subscribe to the \"TRANSACTIONS.ADDED\" and \"TRANSACTIONS.UPDATED\" webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve social transactions in bulk API](../reference/openapi.v1.yml/paths/~1v1~1social~1income~1transactions~1search/post) for optimal performance.   Check the `category` field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \"Category\" column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \"social\".
    # @param [Hash] opts the optional parameters
    # @option opts [Refresh1] :refresh1
    # @return [Refresh1]
    def v1_refresh_social_income_transactions(opts = {})
      data, _status_code, _headers = v1_refresh_social_income_transactions_with_http_info(opts)
      data
    end

    # Refresh social transactions for an account
    # Refresh transactions for a connected social account for the default refresh period, which is T-12 months for transactions. Once Phyllo processes the request, you can fetch the updated transactions by calling the [retrieve social transactions API](../reference/openapi.v1.yml/paths/~1v1~1social~1income~1transactions/get).   Subscribe to the \&quot;TRANSACTIONS.ADDED\&quot; and \&quot;TRANSACTIONS.UPDATED\&quot; webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve social transactions in bulk API](../reference/openapi.v1.yml/paths/~1v1~1social~1income~1transactions~1search/post) for optimal performance.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;social\&quot;.
    # @param [Hash] opts the optional parameters
    # @option opts [Refresh1] :refresh1
    # @return [Array<(Refresh1, Integer, Hash)>] Refresh1 data, response status code and response headers
    def v1_refresh_social_income_transactions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IncomeApi.v1_refresh_social_income_transactions ..."
      end
      # resource path
      local_var_path = "/v1/social/income/transactions/refresh"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:refresh1])

      # return_type
      return_type = opts[:debug_return_type] || "Refresh1"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["Basic Authentication"]

      new_options = opts.merge(
        operation: :"IncomeApi.v1_refresh_social_income_transactions",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncomeApi#v1_refresh_social_income_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Retrieve e-commerce balances in bulk
    # Search balances in bulk by providing the IDs.   This is best used in combination with webhooks - you can directly take the IDs from \"BALANCES.ADDED\" and \"BALANCES.UPDATED\" webhook notifications and pass on to this API to get the updated transaction items.   Check the `category` field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \"Category\" column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \"commerce\".
    # @param [Hash] opts the optional parameters
    # @option opts [CommerceBalanceSearch1] :commerce_balance_search1
    # @return [CommerceBalanceSearchList1]
    def v1_search_commerce_income_balances(opts = {})
      data, _status_code, _headers = v1_search_commerce_income_balances_with_http_info(opts)
      data
    end

    # Retrieve e-commerce balances in bulk
    # Search balances in bulk by providing the IDs.   This is best used in combination with webhooks - you can directly take the IDs from \&quot;BALANCES.ADDED\&quot; and \&quot;BALANCES.UPDATED\&quot; webhook notifications and pass on to this API to get the updated transaction items.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;commerce\&quot;.
    # @param [Hash] opts the optional parameters
    # @option opts [CommerceBalanceSearch1] :commerce_balance_search1
    # @return [Array<(CommerceBalanceSearchList1, Integer, Hash)>] CommerceBalanceSearchList1 data, response status code and response headers
    def v1_search_commerce_income_balances_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IncomeApi.v1_search_commerce_income_balances ..."
      end
      # resource path
      local_var_path = "/v1/commerce/income/balances/search"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:commerce_balance_search1])

      # return_type
      return_type = opts[:debug_return_type] || "CommerceBalanceSearchList1"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["Basic Authentication"]

      new_options = opts.merge(
        operation: :"IncomeApi.v1_search_commerce_income_balances",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncomeApi#v1_search_commerce_income_balances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Retrieve e-commerce payouts in bulk
    # Search payouts in bulk by providing the IDs.   This is best used in combination with webhooks - you can directly take the IDs from \"PAYOUTS.ADDED\" and \"PAYOUTS.UPDATED\" webhook notifications and pass on to this API to get the updated payout items.   Check the `category` field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \"Category\" column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \"commerce\".
    # @param [Hash] opts the optional parameters
    # @option opts [CommercePayoutSearch1] :commerce_payout_search1
    # @return [CommercePayoutSearchList1]
    def v1_search_commerce_income_payouts(opts = {})
      data, _status_code, _headers = v1_search_commerce_income_payouts_with_http_info(opts)
      data
    end

    # Retrieve e-commerce payouts in bulk
    # Search payouts in bulk by providing the IDs.   This is best used in combination with webhooks - you can directly take the IDs from \&quot;PAYOUTS.ADDED\&quot; and \&quot;PAYOUTS.UPDATED\&quot; webhook notifications and pass on to this API to get the updated payout items.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;commerce\&quot;.
    # @param [Hash] opts the optional parameters
    # @option opts [CommercePayoutSearch1] :commerce_payout_search1
    # @return [Array<(CommercePayoutSearchList1, Integer, Hash)>] CommercePayoutSearchList1 data, response status code and response headers
    def v1_search_commerce_income_payouts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IncomeApi.v1_search_commerce_income_payouts ..."
      end
      # resource path
      local_var_path = "/v1/commerce/income/payouts/search"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:commerce_payout_search1])

      # return_type
      return_type = opts[:debug_return_type] || "CommercePayoutSearchList1"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["Basic Authentication"]

      new_options = opts.merge(
        operation: :"IncomeApi.v1_search_commerce_income_payouts",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncomeApi#v1_search_commerce_income_payouts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Retrieve e-commerce transactions in bulk
    # Search transactions in bulk by providing the IDs.   This is best used in combination with webhooks - you can directly take the IDs from \"TRANSACTIONS.ADDED\" and \"TRANSACTIONS.UPDATED\" webhook notifications and pass on to this API to get the updated transaction items.   Check the `category` field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \"Category\" column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \"commerce\".
    # @param [Hash] opts the optional parameters
    # @option opts [CommerceTransactionSearch1] :commerce_transaction_search1
    # @return [CommerceTransactionSearchList1]
    def v1_search_commerce_income_transactions(opts = {})
      data, _status_code, _headers = v1_search_commerce_income_transactions_with_http_info(opts)
      data
    end

    # Retrieve e-commerce transactions in bulk
    # Search transactions in bulk by providing the IDs.   This is best used in combination with webhooks - you can directly take the IDs from \&quot;TRANSACTIONS.ADDED\&quot; and \&quot;TRANSACTIONS.UPDATED\&quot; webhook notifications and pass on to this API to get the updated transaction items.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;commerce\&quot;.
    # @param [Hash] opts the optional parameters
    # @option opts [CommerceTransactionSearch1] :commerce_transaction_search1
    # @return [Array<(CommerceTransactionSearchList1, Integer, Hash)>] CommerceTransactionSearchList1 data, response status code and response headers
    def v1_search_commerce_income_transactions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IncomeApi.v1_search_commerce_income_transactions ..."
      end
      # resource path
      local_var_path = "/v1/commerce/income/transactions/search"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:commerce_transaction_search1])

      # return_type
      return_type = opts[:debug_return_type] || "CommerceTransactionSearchList1"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["Basic Authentication"]

      new_options = opts.merge(
        operation: :"IncomeApi.v1_search_commerce_income_transactions",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncomeApi#v1_search_commerce_income_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Retrieve social payouts in bulk
    # Search payouts in bulk by providing the IDs.   This is best used in combination with webhooks - you can directly take the IDs from \"PAYOUTS.ADDED\" and \"PAYOUTS.UPDATED\" webhook notifications and pass on to this API to get the updated payout items.   Check the `category` field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \"Category\" column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \"social\".
    # @param [Hash] opts the optional parameters
    # @option opts [CommercePayoutSearch1] :commerce_payout_search1
    # @return [CommercePayoutSearchList1]
    def v1_search_social_income_payouts(opts = {})
      data, _status_code, _headers = v1_search_social_income_payouts_with_http_info(opts)
      data
    end

    # Retrieve social payouts in bulk
    # Search payouts in bulk by providing the IDs.   This is best used in combination with webhooks - you can directly take the IDs from \&quot;PAYOUTS.ADDED\&quot; and \&quot;PAYOUTS.UPDATED\&quot; webhook notifications and pass on to this API to get the updated payout items.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;social\&quot;.
    # @param [Hash] opts the optional parameters
    # @option opts [CommercePayoutSearch1] :commerce_payout_search1
    # @return [Array<(CommercePayoutSearchList1, Integer, Hash)>] CommercePayoutSearchList1 data, response status code and response headers
    def v1_search_social_income_payouts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IncomeApi.v1_search_social_income_payouts ..."
      end
      # resource path
      local_var_path = "/v1/social/income/payouts/search"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:commerce_payout_search1])

      # return_type
      return_type = opts[:debug_return_type] || "CommercePayoutSearchList1"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["Basic Authentication"]

      new_options = opts.merge(
        operation: :"IncomeApi.v1_search_social_income_payouts",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncomeApi#v1_search_social_income_payouts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Retrieve social transactions in bulk
    # Search transactions in bulk by providing the IDs.   This is best used in combination with webhooks - you can directly take the IDs from \"TRANSACTIONS.ADDED\" and \"TRANSACTIONS.UPDATED\" webhook notifications and pass on to this API to get the updated transaction items.   Check the `category` field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \"Category\" column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \"social\".
    # @param [Hash] opts the optional parameters
    # @option opts [SocialTransactionSearch1] :social_transaction_search1
    # @return [SocialTransactionSearchList1]
    def v1_search_social_income_transactions(opts = {})
      data, _status_code, _headers = v1_search_social_income_transactions_with_http_info(opts)
      data
    end

    # Retrieve social transactions in bulk
    # Search transactions in bulk by providing the IDs.   This is best used in combination with webhooks - you can directly take the IDs from \&quot;TRANSACTIONS.ADDED\&quot; and \&quot;TRANSACTIONS.UPDATED\&quot; webhook notifications and pass on to this API to get the updated transaction items.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;social\&quot;.
    # @param [Hash] opts the optional parameters
    # @option opts [SocialTransactionSearch1] :social_transaction_search1
    # @return [Array<(SocialTransactionSearchList1, Integer, Hash)>] SocialTransactionSearchList1 data, response status code and response headers
    def v1_search_social_income_transactions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IncomeApi.v1_search_social_income_transactions ..."
      end
      # resource path
      local_var_path = "/v1/social/income/transactions/search"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:social_transaction_search1])

      # return_type
      return_type = opts[:debug_return_type] || "SocialTransactionSearchList1"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["Basic Authentication"]

      new_options = opts.merge(
        operation: :"IncomeApi.v1_search_social_income_transactions",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncomeApi#v1_search_social_income_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
