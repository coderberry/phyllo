# #API References
#
# The **Phyllo API** is built on RESTful principles and returns JSON encoded responses and accepts JSON payloads. It is only available through HTTPS to ensure the security of the data in transfer. These APIs must be called only from your server and never from your app / frontend as this is a security concern.  The API operates in three environments: **sandbox**, **staging** and **production**.  The sandbox environment returns mock data and is used for testing the basic functionality of the system.  The staging environment is exactly like a production environment but with certain limitations. It is used for your internal testing and development purposes.  The production environment connects to real platform accounts and all data reads and writes are made to live accounts. This is what you would use to get data for your customers.
#
# The version of the OpenAPI document: v1.0
# Contact: support@getphyllo.com
# Generated by: https://openapi-generator.tech
# Generator version: 7.6.0
#

require "cgi"

module Phyllo
  class ActivityApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Retrieve an artist (user activity)
    # Retrieve the information of the artist with the supplied artist ID.
    # @param id [String] Unique identifier for the artist
    # @param [Hash] opts the optional parameters
    # @return [ActivityArtist1]
    def v1_get_media_activity_artist_by_id(id, opts = {})
      data, _status_code, _headers = v1_get_media_activity_artist_by_id_with_http_info(id, opts)
      data
    end

    # Retrieve an artist (user activity)
    # Retrieve the information of the artist with the supplied artist ID.
    # @param id [String] Unique identifier for the artist
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActivityArtist1, Integer, Hash)>] ActivityArtist1 data, response status code and response headers
    def v1_get_media_activity_artist_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ActivityApi.v1_get_media_activity_artist_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ActivityApi.v1_get_media_activity_artist_by_id"
      end
      # resource path
      local_var_path = "/v1/media/activity/artists/{id}".sub("{" + "id" + "}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "ActivityArtist1"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["Basic Authentication"]

      new_options = opts.merge(
        operation: :"ActivityApi.v1_get_media_activity_artist_by_id",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActivityApi#v1_get_media_activity_artist_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Retrieve artists for an account (user activity)
    # Lists all `TOP` and `FOLLOWED` artists from the activity history of the given account.
    # @param account_id [String] Unique ID of the connected account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10. (default to 10)
    # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0. (default to 0)
    # @return [ActivityArtistList1]
    def v1_get_media_activity_artists(account_id, opts = {})
      data, _status_code, _headers = v1_get_media_activity_artists_with_http_info(account_id, opts)
      data
    end

    # Retrieve artists for an account (user activity)
    # Lists all &#x60;TOP&#x60; and &#x60;FOLLOWED&#x60; artists from the activity history of the given account.
    # @param account_id [String] Unique ID of the connected account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10. (default to 10)
    # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0. (default to 0)
    # @return [Array<(ActivityArtistList1, Integer, Hash)>] ActivityArtistList1 data, response status code and response headers
    def v1_get_media_activity_artists_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ActivityApi.v1_get_media_activity_artists ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ActivityApi.v1_get_media_activity_artists"
      end
      # resource path
      local_var_path = "/v1/media/activity/artists"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:account_id] = account_id
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "ActivityArtistList1"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["Basic Authentication"]

      new_options = opts.merge(
        operation: :"ActivityApi.v1_get_media_activity_artists",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActivityApi#v1_get_media_activity_artists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Retrieve a content (user activity)
    # Retrieve the information of the content with the supplied content ID.
    # @param id [String] Unique identifier for the content
    # @param [Hash] opts the optional parameters
    # @return [ActivityContent1]
    def v1_get_media_activity_content_by_id(id, opts = {})
      data, _status_code, _headers = v1_get_media_activity_content_by_id_with_http_info(id, opts)
      data
    end

    # Retrieve a content (user activity)
    # Retrieve the information of the content with the supplied content ID.
    # @param id [String] Unique identifier for the content
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActivityContent1, Integer, Hash)>] ActivityContent1 data, response status code and response headers
    def v1_get_media_activity_content_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ActivityApi.v1_get_media_activity_content_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ActivityApi.v1_get_media_activity_content_by_id"
      end
      # resource path
      local_var_path = "/v1/media/activity/contents/{id}".sub("{" + "id" + "}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "ActivityContent1"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["Basic Authentication"]

      new_options = opts.merge(
        operation: :"ActivityApi.v1_get_media_activity_content_by_id",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActivityApi#v1_get_media_activity_content_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Retrieve contents for an account (user activity)
    # Lists all `RECENT`, `TOP` and `SAVED` contents from the activity history of the given account.
    # @param account_id [String] Unique ID of the connected account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10. (default to 10)
    # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0. (default to 0)
    # @return [ActivityContentList1]
    def v1_get_media_activity_contents(account_id, opts = {})
      data, _status_code, _headers = v1_get_media_activity_contents_with_http_info(account_id, opts)
      data
    end

    # Retrieve contents for an account (user activity)
    # Lists all &#x60;RECENT&#x60;, &#x60;TOP&#x60; and &#x60;SAVED&#x60; contents from the activity history of the given account.
    # @param account_id [String] Unique ID of the connected account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10. (default to 10)
    # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0. (default to 0)
    # @return [Array<(ActivityContentList1, Integer, Hash)>] ActivityContentList1 data, response status code and response headers
    def v1_get_media_activity_contents_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ActivityApi.v1_get_media_activity_contents ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ActivityApi.v1_get_media_activity_contents"
      end
      # resource path
      local_var_path = "/v1/media/activity/contents"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:account_id] = account_id
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "ActivityContentList1"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["Basic Authentication"]

      new_options = opts.merge(
        operation: :"ActivityApi.v1_get_media_activity_contents",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActivityApi#v1_get_media_activity_contents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Retrieve artists for an account (user activity) in bulk
    # Search information of the artists in bulk by providing IDs.   This is best used in combination with webhooks - you can directly take the IDs from \"ACTIVITY-ARTISTS.ADDED\" and \"ACTIVITY-ARTISTS.UPDATED\" webhook notifications and pass on to this API to get the updated artist items.
    # @param [Hash] opts the optional parameters
    # @option opts [ActivityArtistSearch1] :activity_artist_search1
    # @return [ActivityArtistSearchList1]
    def v1_search_media_activity_artists(opts = {})
      data, _status_code, _headers = v1_search_media_activity_artists_with_http_info(opts)
      data
    end

    # Retrieve artists for an account (user activity) in bulk
    # Search information of the artists in bulk by providing IDs.   This is best used in combination with webhooks - you can directly take the IDs from \&quot;ACTIVITY-ARTISTS.ADDED\&quot; and \&quot;ACTIVITY-ARTISTS.UPDATED\&quot; webhook notifications and pass on to this API to get the updated artist items.
    # @param [Hash] opts the optional parameters
    # @option opts [ActivityArtistSearch1] :activity_artist_search1
    # @return [Array<(ActivityArtistSearchList1, Integer, Hash)>] ActivityArtistSearchList1 data, response status code and response headers
    def v1_search_media_activity_artists_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ActivityApi.v1_search_media_activity_artists ..."
      end
      # resource path
      local_var_path = "/v1/media/activity/artists/search"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:activity_artist_search1])

      # return_type
      return_type = opts[:debug_return_type] || "ActivityArtistSearchList1"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["Basic Authentication"]

      new_options = opts.merge(
        operation: :"ActivityApi.v1_search_media_activity_artists",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActivityApi#v1_search_media_activity_artists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Retrieve contents for an account (user activity) in bulk
    # Search information of the contents in bulk by providing IDs.   This is best used in combination with webhooks - you can directly take the IDs from \"ACTIVITY-CONTENTS.ADDED\" and \"ACTIVITY-CONTENTS.UPDATED\" webhook notifications and pass on to this API to get the updated content items.
    # @param [Hash] opts the optional parameters
    # @option opts [ActivityContentSearch1] :activity_content_search1
    # @return [ActivityContentSearchList1]
    def v1_search_media_activity_contents(opts = {})
      data, _status_code, _headers = v1_search_media_activity_contents_with_http_info(opts)
      data
    end

    # Retrieve contents for an account (user activity) in bulk
    # Search information of the contents in bulk by providing IDs.   This is best used in combination with webhooks - you can directly take the IDs from \&quot;ACTIVITY-CONTENTS.ADDED\&quot; and \&quot;ACTIVITY-CONTENTS.UPDATED\&quot; webhook notifications and pass on to this API to get the updated content items.
    # @param [Hash] opts the optional parameters
    # @option opts [ActivityContentSearch1] :activity_content_search1
    # @return [Array<(ActivityContentSearchList1, Integer, Hash)>] ActivityContentSearchList1 data, response status code and response headers
    def v1_search_media_activity_contents_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ActivityApi.v1_search_media_activity_contents ..."
      end
      # resource path
      local_var_path = "/v1/media/activity/contents/search"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:activity_content_search1])

      # return_type
      return_type = opts[:debug_return_type] || "ActivityContentSearchList1"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["Basic Authentication"]

      new_options = opts.merge(
        operation: :"ActivityApi.v1_search_media_activity_contents",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActivityApi#v1_search_media_activity_contents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
