=begin
#API References

#The **Phyllo API** is built on RESTful principles and returns JSON encoded responses and accepts JSON payloads. It is only available through HTTPS to ensure the security of the data in transfer. These APIs must be called only from your server and never from your app / frontend as this is a security concern.  The API operates in three environments: **sandbox**, **staging** and **production**.  The sandbox environment returns mock data and is used for testing the basic functionality of the system.  The staging environment is exactly like a production environment but with certain limitations. It is used for your internal testing and development purposes.  The production environment connects to real platform accounts and all data reads and writes are made to live accounts. This is what you would use to get data for your customers.

The version of the OpenAPI document: v1.0
Contact: support@getphyllo.com
Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'cgi'

module Phyllo
  class ConnectApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve all users
    # Lists all Users.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10. (default to 10)
    # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0. (default to 0)
    # @return [UserResponseList1]
    def v1_connect_get_users(opts = {})
      data, _status_code, _headers = v1_connect_get_users_with_http_info(opts)
      data
    end

    # Retrieve all users
    # Lists all Users.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10. (default to 10)
    # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0. (default to 0)
    # @return [Array<(UserResponseList1, Integer, Hash)>] UserResponseList1 data, response status code and response headers
    def v1_connect_get_users_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectApi.v1_connect_get_users ...'
      end
      # resource path
      local_var_path = '/v1/users'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserResponseList1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic Authentication']

      new_options = opts.merge(
        :operation => :"ConnectApi.v1_connect_get_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectApi#v1_connect_get_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a user by external ID
    # Retrieve the information of the User with the supplied External id.
    # @param external_id [String] Unique ID for the user supplied by you
    # @param [Hash] opts the optional parameters
    # @return [User]
    def v1_connect_get_users_by_external_id(external_id, opts = {})
      data, _status_code, _headers = v1_connect_get_users_by_external_id_with_http_info(external_id, opts)
      data
    end

    # Retrieve a user by external ID
    # Retrieve the information of the User with the supplied External id.
    # @param external_id [String] Unique ID for the user supplied by you
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def v1_connect_get_users_by_external_id_with_http_info(external_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectApi.v1_connect_get_users_by_external_id ...'
      end
      # verify the required parameter 'external_id' is set
      if @api_client.config.client_side_validation && external_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_id' when calling ConnectApi.v1_connect_get_users_by_external_id"
      end
      # resource path
      local_var_path = '/v1/users/external_id/{external_id}'.sub('{' + 'external_id' + '}', CGI.escape(external_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'User'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic Authentication']

      new_options = opts.merge(
        :operation => :"ConnectApi.v1_connect_get_users_by_external_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectApi#v1_connect_get_users_by_external_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a user
    # Retrieve the information of the User with the supplied User id.
    # @param id [String] Unique identifier for the user.
    # @param [Hash] opts the optional parameters
    # @return [User]
    def v1_connect_get_users_by_id(id, opts = {})
      data, _status_code, _headers = v1_connect_get_users_by_id_with_http_info(id, opts)
      data
    end

    # Retrieve a user
    # Retrieve the information of the User with the supplied User id.
    # @param id [String] Unique identifier for the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def v1_connect_get_users_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectApi.v1_connect_get_users_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ConnectApi.v1_connect_get_users_by_id"
      end
      # resource path
      local_var_path = '/v1/users/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'User'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic Authentication']

      new_options = opts.merge(
        :operation => :"ConnectApi.v1_connect_get_users_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectApi#v1_connect_get_users_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all work platforms
    # Lists all Work Platforms.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Only return objects with the name provided.
    # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10. (default to 10)
    # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0. (default to 0)
    # @return [WorkPlatformList1]
    def v1_connect_get_work_platforms(opts = {})
      data, _status_code, _headers = v1_connect_get_work_platforms_with_http_info(opts)
      data
    end

    # Retrieve all work platforms
    # Lists all Work Platforms.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Only return objects with the name provided.
    # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10. (default to 10)
    # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0. (default to 0)
    # @return [Array<(WorkPlatformList1, Integer, Hash)>] WorkPlatformList1 data, response status code and response headers
    def v1_connect_get_work_platforms_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectApi.v1_connect_get_work_platforms ...'
      end
      # resource path
      local_var_path = '/v1/work-platforms'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WorkPlatformList1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic Authentication']

      new_options = opts.merge(
        :operation => :"ConnectApi.v1_connect_get_work_platforms",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectApi#v1_connect_get_work_platforms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a work platform
    # Retrieves the information of the Work Platform object with the supplied Work Platform id.
    # @param id [String] Unique identifier for the work platform.
    # @param [Hash] opts the optional parameters
    # @return [WorkPlatform1]
    def v1_connect_get_work_platforms_by_id(id, opts = {})
      data, _status_code, _headers = v1_connect_get_work_platforms_by_id_with_http_info(id, opts)
      data
    end

    # Retrieve a work platform
    # Retrieves the information of the Work Platform object with the supplied Work Platform id.
    # @param id [String] Unique identifier for the work platform.
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorkPlatform1, Integer, Hash)>] WorkPlatform1 data, response status code and response headers
    def v1_connect_get_work_platforms_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectApi.v1_connect_get_work_platforms_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ConnectApi.v1_connect_get_work_platforms_by_id"
      end
      # resource path
      local_var_path = '/v1/work-platforms/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WorkPlatform1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic Authentication']

      new_options = opts.merge(
        :operation => :"ConnectApi.v1_connect_get_work_platforms_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectApi#v1_connect_get_work_platforms_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an SDK token
    # Creates the Connect SDK Token. This is required while initializing the Connect SDK.
    # @param [Hash] opts the optional parameters
    # @option opts [SDKTokenRequest1] :sdk_token_request1 
    # @return [SDKTokenResponse1]
    def v1_connect_post_sdk_tokens(opts = {})
      data, _status_code, _headers = v1_connect_post_sdk_tokens_with_http_info(opts)
      data
    end

    # Create an SDK token
    # Creates the Connect SDK Token. This is required while initializing the Connect SDK.
    # @param [Hash] opts the optional parameters
    # @option opts [SDKTokenRequest1] :sdk_token_request1 
    # @return [Array<(SDKTokenResponse1, Integer, Hash)>] SDKTokenResponse1 data, response status code and response headers
    def v1_connect_post_sdk_tokens_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectApi.v1_connect_post_sdk_tokens ...'
      end
      # resource path
      local_var_path = '/v1/sdk-tokens'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'sdk_token_request1'])

      # return_type
      return_type = opts[:debug_return_type] || 'SDKTokenResponse1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic Authentication']

      new_options = opts.merge(
        :operation => :"ConnectApi.v1_connect_post_sdk_tokens",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectApi#v1_connect_post_sdk_tokens\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a user
    # Create a User.
    # @param [Hash] opts the optional parameters
    # @option opts [UserRequest1] :user_request1 
    # @return [User]
    def v1_connect_post_users(opts = {})
      data, _status_code, _headers = v1_connect_post_users_with_http_info(opts)
      data
    end

    # Create a user
    # Create a User.
    # @param [Hash] opts the optional parameters
    # @option opts [UserRequest1] :user_request1 
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def v1_connect_post_users_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectApi.v1_connect_post_users ...'
      end
      # resource path
      local_var_path = '/v1/users'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'user_request1'])

      # return_type
      return_type = opts[:debug_return_type] || 'User'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic Authentication']

      new_options = opts.merge(
        :operation => :"ConnectApi.v1_connect_post_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectApi#v1_connect_post_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disconnect an account
    # Disconnect the supplied account id. An Account represents the user account on the work platform end.
    # @param id [String] Unique identifier for the account.
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body Empty JSON
    # @return [DisconnectAccountResponse1]
    def v1_disconnect_account_by_id(id, opts = {})
      data, _status_code, _headers = v1_disconnect_account_by_id_with_http_info(id, opts)
      data
    end

    # Disconnect an account
    # Disconnect the supplied account id. An Account represents the user account on the work platform end.
    # @param id [String] Unique identifier for the account.
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body Empty JSON
    # @return [Array<(DisconnectAccountResponse1, Integer, Hash)>] DisconnectAccountResponse1 data, response status code and response headers
    def v1_disconnect_account_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectApi.v1_disconnect_account_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ConnectApi.v1_disconnect_account_by_id"
      end
      # resource path
      local_var_path = '/v1/accounts/{id}/disconnect'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'DisconnectAccountResponse1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic Authentication']

      new_options = opts.merge(
        :operation => :"ConnectApi.v1_disconnect_account_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectApi#v1_disconnect_account_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all accounts
    # Lists all Accounts. An Account represents the user account on the work platform end. A user can connect multiple account in the same or across multiple work platforms.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0. (default to 0)
    # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10. (default to 10)
    # @option opts [String] :work_platform_id Unique ID of the work platform.
    # @option opts [String] :user_id Unique ID of the user.
    # @return [AccountList1]
    def v1_stream_get_accounts(opts = {})
      data, _status_code, _headers = v1_stream_get_accounts_with_http_info(opts)
      data
    end

    # Retrieve all accounts
    # Lists all Accounts. An Account represents the user account on the work platform end. A user can connect multiple account in the same or across multiple work platforms.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0. (default to 0)
    # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10. (default to 10)
    # @option opts [String] :work_platform_id Unique ID of the work platform.
    # @option opts [String] :user_id Unique ID of the user.
    # @return [Array<(AccountList1, Integer, Hash)>] AccountList1 data, response status code and response headers
    def v1_stream_get_accounts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectApi.v1_stream_get_accounts ...'
      end
      # resource path
      local_var_path = '/v1/accounts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'work_platform_id'] = opts[:'work_platform_id'] if !opts[:'work_platform_id'].nil?
      query_params[:'user_id'] = opts[:'user_id'] if !opts[:'user_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountList1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic Authentication']

      new_options = opts.merge(
        :operation => :"ConnectApi.v1_stream_get_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectApi#v1_stream_get_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an account
    # Retrieve the information of the Account with the supplied Account id. An Account represents the user account on the work platform end. A user can connect multiple account in the same or across multiple work platforms.
    # @param id [String] Unique identifier for the account.
    # @param [Hash] opts the optional parameters
    # @return [Account1]
    def v1_stream_get_accounts_by_id(id, opts = {})
      data, _status_code, _headers = v1_stream_get_accounts_by_id_with_http_info(id, opts)
      data
    end

    # Retrieve an account
    # Retrieve the information of the Account with the supplied Account id. An Account represents the user account on the work platform end. A user can connect multiple account in the same or across multiple work platforms.
    # @param id [String] Unique identifier for the account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Account1, Integer, Hash)>] Account1 data, response status code and response headers
    def v1_stream_get_accounts_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectApi.v1_stream_get_accounts_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ConnectApi.v1_stream_get_accounts_by_id"
      end
      # resource path
      local_var_path = '/v1/accounts/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Account1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic Authentication']

      new_options = opts.merge(
        :operation => :"ConnectApi.v1_stream_get_accounts_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectApi#v1_stream_get_accounts_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
