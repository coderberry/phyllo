=begin
#API References

#The **Phyllo API** is built on RESTful principles and returns JSON encoded responses and accepts JSON payloads. It is only available through HTTPS to ensure the security of the data in transfer. These APIs must be called only from your server and never from your app / frontend as this is a security concern.  The API operates in three environments: **sandbox**, **staging** and **production**.  The sandbox environment returns mock data and is used for testing the basic functionality of the system.  The staging environment is exactly like a production environment but with certain limitations. It is used for your internal testing and development purposes.  The production environment connects to real platform accounts and all data reads and writes are made to live accounts. This is what you would use to get data for your customers.

The version of the OpenAPI document: v1.0
Contact: support@getphyllo.com
Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'cgi'

module Phyllo
  class PublishApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Check status of content publish
    # Check status of the content publish request by ID.   This is best used in combination with webhooks - you can directly take the publish ID from \"CONTENTS.PUBLISH_SUCCESS\", \"CONTENTS.PUBLISH_READY\" and \"CONTENTS.PUBLISH_FAILURE\" webhook notifications and pass on to this API to get the updated status of publishing request.
    # @param id [String] Unique ID of the publish request
    # @param [Hash] opts the optional parameters
    # @return [PublishContentResponse1]
    def v1_get_social_content_publish(id, opts = {})
      data, _status_code, _headers = v1_get_social_content_publish_with_http_info(id, opts)
      data
    end

    # Check status of content publish
    # Check status of the content publish request by ID.   This is best used in combination with webhooks - you can directly take the publish ID from \&quot;CONTENTS.PUBLISH_SUCCESS\&quot;, \&quot;CONTENTS.PUBLISH_READY\&quot; and \&quot;CONTENTS.PUBLISH_FAILURE\&quot; webhook notifications and pass on to this API to get the updated status of publishing request.
    # @param id [String] Unique ID of the publish request
    # @param [Hash] opts the optional parameters
    # @return [Array<(PublishContentResponse1, Integer, Hash)>] PublishContentResponse1 data, response status code and response headers
    def v1_get_social_content_publish_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PublishApi.v1_get_social_content_publish ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PublishApi.v1_get_social_content_publish"
      end
      # resource path
      local_var_path = '/v1/social/contents/publish/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PublishContentResponse1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic Authentication']

      new_options = opts.merge(
        :operation => :"PublishApi.v1_get_social_content_publish",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PublishApi#v1_get_social_content_publish\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Publish content to a platform
    # Publish content to a platform by providing the account ID.   Check the [publishing content page](../../../API/publishing-content) for detailed info on how to use this API.   Subscribe to the \"CONTENTS.PUBLISH_SUCCESS\", \"CONTENTS.PUBLISH_READY\" and \"CONTENTS.PUBLISH_FAILURE\" webhooks to receive a notification once the request is completed. With webhooks, you should use the [check status of content publish API](../reference/openapi.v1.yml/paths/~1v1~1social~1contents~1publish~1{id}/get) to check the detailed status of the publish request.
    # @param [Hash] opts the optional parameters
    # @option opts [PublishContentRequest1] :publish_content_request1 
    # @return [PublishContentResponse1]
    def v1_social_content_publish(opts = {})
      data, _status_code, _headers = v1_social_content_publish_with_http_info(opts)
      data
    end

    # Publish content to a platform
    # Publish content to a platform by providing the account ID.   Check the [publishing content page](../../../API/publishing-content) for detailed info on how to use this API.   Subscribe to the \&quot;CONTENTS.PUBLISH_SUCCESS\&quot;, \&quot;CONTENTS.PUBLISH_READY\&quot; and \&quot;CONTENTS.PUBLISH_FAILURE\&quot; webhooks to receive a notification once the request is completed. With webhooks, you should use the [check status of content publish API](../reference/openapi.v1.yml/paths/~1v1~1social~1contents~1publish~1{id}/get) to check the detailed status of the publish request.
    # @param [Hash] opts the optional parameters
    # @option opts [PublishContentRequest1] :publish_content_request1 
    # @return [Array<(PublishContentResponse1, Integer, Hash)>] PublishContentResponse1 data, response status code and response headers
    def v1_social_content_publish_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PublishApi.v1_social_content_publish ...'
      end
      # resource path
      local_var_path = '/v1/social/contents/publish'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'publish_content_request1'])

      # return_type
      return_type = opts[:debug_return_type] || 'PublishContentResponse1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic Authentication']

      new_options = opts.merge(
        :operation => :"PublishApi.v1_social_content_publish",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PublishApi#v1_social_content_publish\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
