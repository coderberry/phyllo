=begin
#API References

#The **Phyllo API** is built on RESTful principles and returns JSON encoded responses and accepts JSON payloads. It is only available through HTTPS to ensure the security of the data in transfer. These APIs must be called only from your server and never from your app / frontend as this is a security concern.  The API operates in three environments: **sandbox**, **staging** and **production**.  The sandbox environment returns mock data and is used for testing the basic functionality of the system.  The staging environment is exactly like a production environment but with certain limitations. It is used for your internal testing and development purposes.  The production environment connects to real platform accounts and all data reads and writes are made to live accounts. This is what you would use to get data for your customers.

The version of the OpenAPI document: v1.0
Contact: support@getphyllo.com
Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Phyllo::IncomeApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'IncomeApi' do
  before do
    # run before each test
    @api_instance = Phyllo::IncomeApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of IncomeApi' do
    it 'should create an instance of IncomeApi' do
      expect(@api_instance).to be_instance_of(Phyllo::IncomeApi)
    end
  end

  # unit tests for v1_fetch_historic_commerce_income_balances
  # Fetch historic e-commerce balances for an account
  # Fetch balances for a connected e-commerce account starting from a specific date till today by providing the &#x60;from_date&#x60;. Once Phyllo processes the request, you can fetch the updated balances by calling the [retrieve e-commerce balances API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1balances/get).   Subscribe to the \&quot;BALANCES.ADDED\&quot; and \&quot;BALANCES.UPDATED\&quot; webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve e-commerce balances in bulk API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1balances~1search/post) for optimal performance.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;commerce\&quot;.
  # @param [Hash] opts the optional parameters
  # @option opts [FetchHistoric1] :fetch_historic1 
  # @return [FetchHistoric1]
  describe 'v1_fetch_historic_commerce_income_balances test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_fetch_historic_commerce_income_payouts
  # Fetch historic e-commerce payouts for an account
  # Fetch payouts for a connected e-commerce account starting from a specific date till today by providing the &#x60;from_date&#x60;. Once Phyllo processes the request, you can fetch the updated payouts by calling the [retrieve e-commerce payouts API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1payouts/get).   Subscribe to the \&quot;PAYOUTS.ADDED\&quot; and \&quot;PAYOUTS.UPDATED\&quot; webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve e-commerce payouts in bulk API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1payouts~1search/post) for optimal performance.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;commerce\&quot;.
  # @param [Hash] opts the optional parameters
  # @option opts [FetchHistoric1] :fetch_historic1 
  # @return [FetchHistoric1]
  describe 'v1_fetch_historic_commerce_income_payouts test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_fetch_historic_commerce_income_transactions
  # Fetch historic e-commerce transactions for an account
  # Fetch transactions for a connected e-commerce account starting from a specific date till today by providing the &#x60;from_date&#x60;. Once Phyllo processes the request, you can fetch the updated transactions by calling the [retrieve e-commerce transactions API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1transactions/get).   Subscribe to the \&quot;TRANSACTIONS.ADDED\&quot; and \&quot;TRANSACTIONS.UPDATED\&quot; webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve e-commerce transactions in bulk API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1transactions~1search/post) for optimal performance.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;commerce\&quot;.
  # @param [Hash] opts the optional parameters
  # @option opts [FetchHistoric1] :fetch_historic1 
  # @return [FetchHistoric1]
  describe 'v1_fetch_historic_commerce_income_transactions test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_fetch_historic_social_income_payouts
  # Fetch historic social payouts for an account
  # Fetch payouts for a connected social account starting from a specific date till today by providing the &#x60;from_date&#x60;. Once Phyllo processes the request, you can fetch the updated payouts by calling the [retrieve social payouts API](../reference/openapi.v1.yml/paths/~1v1~1social~1income~1payouts/get).   Subscribe to the \&quot;PAYOUTS.ADDED\&quot; and \&quot;PAYOUTS.UPDATED\&quot; webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve social payouts in bulk API](../reference/openapi.v1.yml/paths/~1v1~1social~1income~1payouts~1search/post) for optimal performance.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;social\&quot;.
  # @param [Hash] opts the optional parameters
  # @option opts [FetchHistoric1] :fetch_historic1 
  # @return [FetchHistoric1]
  describe 'v1_fetch_historic_social_income_payouts test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_fetch_historic_social_income_transactions
  # Fetch historic social transactions for an account
  # Fetch transactions for a connected social account starting from a specific date till today by providing the &#x60;from_date&#x60;. Once Phyllo processes the request, you can fetch the updated transactions by calling the [retrieve social transactions API](../reference/openapi.v1.yml/paths/~1v1~1social~1income~1transactions/get).   Subscribe to the \&quot;TRANSACTIONS.ADDED\&quot; and \&quot;TRANSACTIONS.UPDATED\&quot; webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve social transactions in bulk API](../reference/openapi.v1.yml/paths/~1v1~1social~1income~1transactions~1search/post) for optimal performance.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;social\&quot;.
  # @param [Hash] opts the optional parameters
  # @option opts [FetchHistoric1] :fetch_historic1 
  # @return [FetchHistoric1]
  describe 'v1_fetch_historic_social_income_transactions test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_get_commerce_income_balance_by_id
  # Retrieve a e-commerce balance
  # Retrieve the information of the balance with the supplied balance ID.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;commerce\&quot;.
  # @param id Unique identifier for the balance
  # @param [Hash] opts the optional parameters
  # @return [CommerceBalance1]
  describe 'v1_get_commerce_income_balance_by_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_get_commerce_income_balances
  # Retrieve e-commerce balances for an account
  # Lists all daily balances of the given e-commerce account.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;commerce\&quot;.
  # @param balance_from_date Return daily balances on or after this date. (YYYY-MM-DD)
  # @param balance_to_date Return daily balances on or before this date. (YYYY-MM-DD)
  # @param account_id Unique ID of the connected account.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10.
  # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0.
  # @return [CommerceBalanceList1]
  describe 'v1_get_commerce_income_balances test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_get_commerce_income_payout_by_id
  # Retrieve a e-commerce payout
  # Retrieve the information of the payout with the supplied payout ID.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;commerce\&quot;.
  # @param id Unique identifier for the payout
  # @param [Hash] opts the optional parameters
  # @return [CommercePayout1]
  describe 'v1_get_commerce_income_payout_by_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_get_commerce_income_payouts
  # Retrieve e-commerce payouts for an account
  # Lists all payouts of the given e-commerce account.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;commerce\&quot;.
  # @param payout_from_date Return payouts on or after this date. (YYYY-MM-DD)
  # @param payout_to_date Return payouts on or before this date. (YYYY-MM-DD)
  # @param account_id Unique ID of the connected account.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10.
  # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0.
  # @return [CommercePayoutList1]
  describe 'v1_get_commerce_income_payouts test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_get_commerce_income_transaction_by_id
  # Retrieve a e-commerce transaction
  # Retrieve the information of the transaction with the supplied transaction ID.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;commerce\&quot;.
  # @param id Unique identifier for the transaction
  # @param [Hash] opts the optional parameters
  # @return [CommerceTransaction1]
  describe 'v1_get_commerce_income_transaction_by_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_get_commerce_income_transactions
  # Retrieve e-commerce transactions for an account
  # Lists all transactions of the given e-commerce account.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;commerce\&quot;.
  # @param transaction_from_date Return transactions on or after this date. (YYYY-MM-DD)
  # @param transaction_to_date Return transactions on or before this date. (YYYY-MM-DD)
  # @param account_id Unique ID of the connected account.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :type Type of transaction on the e-commerce platform
  # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10.
  # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0.
  # @return [CommerceTransactionList1]
  describe 'v1_get_commerce_income_transactions test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_get_social_income_payout_by_id
  # Retrieve a social payout
  # Retrieve the information of the payout with the supplied payout ID.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;social\&quot;.
  # @param id Unique identifier for the transaction
  # @param [Hash] opts the optional parameters
  # @return [CommercePayout1]
  describe 'v1_get_social_income_payout_by_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_get_social_income_payouts
  # Retrieve social payouts for an account
  # Lists all payouts of the given social account.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;social\&quot;.
  # @param payout_from_date Return payouts on or after this date. (YYYY-MM-DD)
  # @param payout_to_date Return payouts on or before this date. (YYYY-MM-DD)
  # @param account_id Unique ID of the connected account.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10.
  # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0.
  # @return [CommercePayoutList1]
  describe 'v1_get_social_income_payouts test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_get_social_income_transaction_by_id
  # Retrieve a social transaction
  # Retrieve the information of the transaction with the supplied transaction ID.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;social\&quot;.
  # @param id Unique identifier for the transaction
  # @param [Hash] opts the optional parameters
  # @return [SocialTransaction1]
  describe 'v1_get_social_income_transaction_by_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_get_social_income_transactions
  # Retrieve social transactions for an account
  # Lists all transactions of the given social account.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;social\&quot;.
  # @param transaction_from_date Return transactions on or after this date. (YYYY-MM-DD)
  # @param transaction_to_date Return transactions on or before this date. (YYYY-MM-DD)
  # @param account_id Unique ID of the connected account.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :type Type of transaction on the social platform
  # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10.
  # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0.
  # @return [SocialTransactionList1]
  describe 'v1_get_social_income_transactions test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_refresh_commerce_income_balances
  # Refresh e-commerce balances for an account
  # Refresh balances for a connected e-commerce account for the default refresh period, which is T-12 months for balances. Once Phyllo processes the request, you can fetch the updated balances by calling the [retrieve e-commerce balances API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1balances/get).   Subscribe to the \&quot;BALANCES.ADDED\&quot; and \&quot;BALANCES.UPDATED\&quot; webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve e-commerce balances in bulk API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1balances~1search/post) for optimal performance.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;commerce\&quot;.
  # @param [Hash] opts the optional parameters
  # @option opts [Refresh1] :refresh1 
  # @return [Refresh1]
  describe 'v1_refresh_commerce_income_balances test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_refresh_commerce_income_payouts
  # Refresh e-commerce payouts for an account
  # Refresh payouts for a connected e-commerce account for the default refresh period, which is T-12 months for payouts. Once Phyllo processes the request, you can fetch the updated payouts by calling the [retrieve e-commerce payouts API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1payouts/get).   Subscribe to the \&quot;PAYOUTS.ADDED\&quot; and \&quot;PAYOUTS.UPDATED\&quot; webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve e-commerce payouts in bulk API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1payouts~1search/post) for optimal performance.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;commerce\&quot;.
  # @param [Hash] opts the optional parameters
  # @option opts [Refresh1] :refresh1 
  # @return [Refresh1]
  describe 'v1_refresh_commerce_income_payouts test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_refresh_commerce_income_transactions
  # Refresh e-commerce transactions for an account
  # Refresh transactions for a connected e-commerce account for the default refresh period, which is T-12 months for transactions. Once Phyllo processes the request, you can fetch the updated transactions by calling the [retrieve e-commerce transactions API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1transactions/get).   Subscribe to the \&quot;TRANSACTIONS.ADDED\&quot; and \&quot;TRANSACTIONS.UPDATED\&quot; webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve e-commerce transactions in bulk API](../reference/openapi.v1.yml/paths/~1v1~1commerce~1income~1transactions~1search/post) for optimal performance.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;commerce\&quot;.
  # @param [Hash] opts the optional parameters
  # @option opts [Refresh1] :refresh1 
  # @return [Refresh1]
  describe 'v1_refresh_commerce_income_transactions test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_refresh_social_income_payouts
  # Refresh social payouts for an account
  # Refresh payouts for a connected social account for the default refresh period, which is T-12 months for payouts. Once Phyllo processes the request, you can fetch the updated payouts by calling the [retrieve social payouts API](../reference/openapi.v1.yml/paths/~1v1~1social~1income~1payouts/get).   Subscribe to the \&quot;PAYOUTS.ADDED\&quot; and \&quot;PAYOUTS.UPDATED\&quot; webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve social payouts in bulk API](../reference/openapi.v1.yml/paths/~1v1~1social~1income~1payouts~1search/post) for optimal performance.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;social\&quot;.
  # @param [Hash] opts the optional parameters
  # @option opts [Refresh1] :refresh1 
  # @return [Refresh1]
  describe 'v1_refresh_social_income_payouts test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_refresh_social_income_transactions
  # Refresh social transactions for an account
  # Refresh transactions for a connected social account for the default refresh period, which is T-12 months for transactions. Once Phyllo processes the request, you can fetch the updated transactions by calling the [retrieve social transactions API](../reference/openapi.v1.yml/paths/~1v1~1social~1income~1transactions/get).   Subscribe to the \&quot;TRANSACTIONS.ADDED\&quot; and \&quot;TRANSACTIONS.UPDATED\&quot; webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve social transactions in bulk API](../reference/openapi.v1.yml/paths/~1v1~1social~1income~1transactions~1search/post) for optimal performance.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;social\&quot;.
  # @param [Hash] opts the optional parameters
  # @option opts [Refresh1] :refresh1 
  # @return [Refresh1]
  describe 'v1_refresh_social_income_transactions test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_search_commerce_income_balances
  # Retrieve e-commerce balances in bulk
  # Search balances in bulk by providing the IDs.   This is best used in combination with webhooks - you can directly take the IDs from \&quot;BALANCES.ADDED\&quot; and \&quot;BALANCES.UPDATED\&quot; webhook notifications and pass on to this API to get the updated transaction items.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;commerce\&quot;.
  # @param [Hash] opts the optional parameters
  # @option opts [CommerceBalanceSearch1] :commerce_balance_search1 
  # @return [CommerceBalanceSearchList1]
  describe 'v1_search_commerce_income_balances test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_search_commerce_income_payouts
  # Retrieve e-commerce payouts in bulk
  # Search payouts in bulk by providing the IDs.   This is best used in combination with webhooks - you can directly take the IDs from \&quot;PAYOUTS.ADDED\&quot; and \&quot;PAYOUTS.UPDATED\&quot; webhook notifications and pass on to this API to get the updated payout items.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;commerce\&quot;.
  # @param [Hash] opts the optional parameters
  # @option opts [CommercePayoutSearch1] :commerce_payout_search1 
  # @return [CommercePayoutSearchList1]
  describe 'v1_search_commerce_income_payouts test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_search_commerce_income_transactions
  # Retrieve e-commerce transactions in bulk
  # Search transactions in bulk by providing the IDs.   This is best used in combination with webhooks - you can directly take the IDs from \&quot;TRANSACTIONS.ADDED\&quot; and \&quot;TRANSACTIONS.UPDATED\&quot; webhook notifications and pass on to this API to get the updated transaction items.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;commerce\&quot;.
  # @param [Hash] opts the optional parameters
  # @option opts [CommerceTransactionSearch1] :commerce_transaction_search1 
  # @return [CommerceTransactionSearchList1]
  describe 'v1_search_commerce_income_transactions test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_search_social_income_payouts
  # Retrieve social payouts in bulk
  # Search payouts in bulk by providing the IDs.   This is best used in combination with webhooks - you can directly take the IDs from \&quot;PAYOUTS.ADDED\&quot; and \&quot;PAYOUTS.UPDATED\&quot; webhook notifications and pass on to this API to get the updated payout items.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;social\&quot;.
  # @param [Hash] opts the optional parameters
  # @option opts [CommercePayoutSearch1] :commerce_payout_search1 
  # @return [CommercePayoutSearchList1]
  describe 'v1_search_social_income_payouts test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_search_social_income_transactions
  # Retrieve social transactions in bulk
  # Search transactions in bulk by providing the IDs.   This is best used in combination with webhooks - you can directly take the IDs from \&quot;TRANSACTIONS.ADDED\&quot; and \&quot;TRANSACTIONS.UPDATED\&quot; webhook notifications and pass on to this API to get the updated transaction items.   Check the &#x60;category&#x60; field from [the work platform API](../reference/openapi.v1.yml/paths/~1v1~1work-platforms/get) response or the \&quot;Category\&quot; column in [this data guide](https://airtable.com/shrwEMTWlgECOUhre) to see which platfroms we serve under \&quot;social\&quot;.
  # @param [Hash] opts the optional parameters
  # @option opts [SocialTransactionSearch1] :social_transaction_search1 
  # @return [SocialTransactionSearchList1]
  describe 'v1_search_social_income_transactions test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
