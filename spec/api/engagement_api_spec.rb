=begin
#API References

#The **Phyllo API** is built on RESTful principles and returns JSON encoded responses and accepts JSON payloads. It is only available through HTTPS to ensure the security of the data in transfer. These APIs must be called only from your server and never from your app / frontend as this is a security concern.  The API operates in three environments: **sandbox**, **staging** and **production**.  The sandbox environment returns mock data and is used for testing the basic functionality of the system.  The staging environment is exactly like a production environment but with certain limitations. It is used for your internal testing and development purposes.  The production environment connects to real platform accounts and all data reads and writes are made to live accounts. This is what you would use to get data for your customers.

The version of the OpenAPI document: v1.0
Contact: support@getphyllo.com
Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Phyllo::EngagementApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'EngagementApi' do
  before do
    # run before each test
    @api_instance = Phyllo::EngagementApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of EngagementApi' do
    it 'should create an instance of EngagementApi' do
      expect(@api_instance).to be_instance_of(Phyllo::EngagementApi)
    end
  end

  # unit tests for postv1pubcontentssearch
  # Retrieve publication content items in bulk
  # Search content items in bulk by providing the IDs.   This is best used in combination with webhooks - you can directly take the IDs from \&quot;CONTENTS.ADDED\&quot; and \&quot;CONTENTS.UPDATED\&quot; webhook notifications and pass on to this API to get the updated content items.
  # @param [Hash] opts the optional parameters
  # @option opts [ContentSearch1] :content_search1 
  # @return [ContentSearchList1]
  describe 'postv1pubcontentssearch test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for postv1socialcontentgroupssearch
  # Retrieve content group items in bulk
  # Search content group items in bulk by providing the IDs.   This is best used in combination with webhooks - you can directly take the IDs from \&quot;CONTENT-GROUPS.ADDED\&quot; and \&quot;CONTENT-GROUPS.UPDATED\&quot; webhook notifications and pass on to this API to get the updated content group items.
  # @param [Hash] opts the optional parameters
  # @option opts [ContentGroupSearch1] :content_group_search1 
  # @return [ContentGroupSearchList1]
  describe 'postv1socialcontentgroupssearch test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for postv1socialcontentssearch
  # Retrieve content items in bulk
  # Search content items in bulk by providing the IDs.   This is best used in combination with webhooks - you can directly take the IDs from \&quot;CONTENTS.ADDED\&quot; and \&quot;CONTENTS.UPDATED\&quot; webhook notifications and pass on to this API to get the updated content items.
  # @param [Hash] opts the optional parameters
  # @option opts [ContentSearch1] :content_search1 
  # @return [ContentSearchList1]
  describe 'postv1socialcontentssearch test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_engagement_get_comments
  # Retrieve all comments
  # Lists all comments of the given account.
  # @param account_id Unique ID of the connected account.
  # @param content_id Unique ID of the content item.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10.
  # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0.
  # @option opts [Date] :to_date Return comments published on or before this date. (YYYY-MM-DD)
  # @option opts [Date] :from_date Return comments published on or after this date. (YYYY-MM-DD)
  # @return [CommentResponse]
  describe 'v1_engagement_get_comments test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_fetch_historic_social_content_groups
  # Fetch historic content groups
  # Fetch content groups for a connected account starting from a specific date till today by providing the &#x60;from_date&#x60;. Once Phyllo processes the request, you can fetch the updated content groups by calling the [retrieve content groups API](../reference/openapi.v1.yml/paths/~1v1~1social~1content-groups/get).   Subscribe to the \&quot;CONTENT-GROUPS.ADDED\&quot; and \&quot;CONTENT-GROUPS.UPDATED\&quot; webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve content groups in bulk API](../reference/openapi.v1.yml/paths/~1v1~1social~1content-groups~1search/post) for optimal performance.
  # @param [Hash] opts the optional parameters
  # @option opts [FetchHistoric1] :fetch_historic1 
  # @return [FetchHistoric1]
  describe 'v1_fetch_historic_social_content_groups test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_fetch_historic_social_contents
  # Fetch historic content items
  # Fetch content items for a connected account starting from a specific date till today by providing the &#x60;from_date&#x60;. Once Phyllo processes the request, you can fetch the updated content items by calling the [retrieve content API](../reference/openapi.v1.yml/paths/~1v1~1social~1contents/get).   Subscribe to the \&quot;CONTENTS.ADDED\&quot; and \&quot;CONTENTS.UPDATED\&quot; webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve content items in bulk API](../reference/openapi.v1.yml/paths/~1v1~1social~1contents~1search/post) for optimal performance.
  # @param [Hash] opts the optional parameters
  # @option opts [FetchHistoric1] :fetch_historic1 
  # @return [FetchHistoric1]
  describe 'v1_fetch_historic_social_contents test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_refresh_social_content_groups
  # Refresh content groups
  # Refresh content groups for a connected account for the default refresh period, which is T-90 days for content groups. Once Phyllo processes the request, you can fetch the updated content items by calling the [retrieve content groups API](../reference/openapi.v1.yml/paths/~1v1~1social~1content-groups/get).   Subscribe to the \&quot;CONTENT-GROUPS.ADDED\&quot; and \&quot;CONTENT-GROUPS.UPDATED\&quot; webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve content groups in bulk API](../reference/openapi.v1.yml/paths/~1v1~1social~1content-groups~1search/post) for optimal performance.
  # @param [Hash] opts the optional parameters
  # @option opts [Refresh1] :refresh1 
  # @return [Refresh1]
  describe 'v1_refresh_social_content_groups test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_refresh_social_contents
  # Refresh content items
  # Refresh content items for a connected account for the default refresh period, which is T-90 days for content items. Once Phyllo processes the request, you can fetch the updated content items by calling the [retrieve content API](../reference/openapi.v1.yml/paths/~1v1~1social~1contents/get).   Subscribe to the \&quot;CONTENTS.ADDED\&quot; and \&quot;CONTENTS.UPDATED\&quot; webhooks to receive a notification once the request is completed. With webhooks, you should use the [retrieve content items in bulk API](../reference/openapi.v1.yml/paths/~1v1~1social~1contents~1search/post) for optimal performance.
  # @param [Hash] opts the optional parameters
  # @option opts [Refresh1] :refresh1 
  # @return [Refresh1]
  describe 'v1_refresh_social_contents test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_stream_get_content_groups
  # Retrieve all content groups
  # Returns all Content Groups objects.
  # @param account_id Unique ID of the connected account.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0.
  # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10.
  # @option opts [Date] :from_date Return content items published on or after this date. (YYYY-MM-DD)
  # @option opts [Date] :to_date Return content items published on or before this date. (YYYY-MM-DD)
  # @return [ContentGroupList1]
  describe 'v1_stream_get_content_groups test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_stream_get_content_groups_by_id
  # Retrieve a content group
  # Retrieve the information of the Content Group with the supplied Content Group id.
  # @param id Unique identifier for the content group
  # @param [Hash] opts the optional parameters
  # @return [ContentGroup1]
  describe 'v1_stream_get_content_groups_by_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_stream_get_contents
  # Retrieve all content items
  # Lists all Contents.
  # @param account_id Unique ID of the connected account.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0.
  # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10.
  # @option opts [Date] :from_date Return content items published on or after this date. (YYYY-MM-DD)
  # @option opts [Date] :to_date Return content items published on or before this date. (YYYY-MM-DD)
  # @return [ContentList1]
  describe 'v1_stream_get_contents test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_stream_get_contents_by_id
  # Retrieve a content item
  # Retrieve the information of the Content with the supplied Content id.
  # @param id Unique identifier for the content
  # @param [Hash] opts the optional parameters
  # @return [Content1]
  describe 'v1_stream_get_contents_by_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_streampub_get_contents
  # Retrieve all publication content items
  # Lists all publication posts.
  # @param account_id Unique ID of the connected account.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :offset The number of objects to skip. Use this argument for pagination. The default value is 0.
  # @option opts [Integer] :limit The number of objects to be returned. It can be between 1 to 100. The default value is 10.
  # @return [ContentList1]
  describe 'v1_streampub_get_contents test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_streampub_get_contents_by_id
  # Retrieve a publication content item
  # Retrieve the engagement information of the newsletter publication with the supplied content id.
  # @param id Unique identifier for the content
  # @param [Hash] opts the optional parameters
  # @return [Content1]
  describe 'v1_streampub_get_contents_by_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
